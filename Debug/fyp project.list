
fyp project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f84  08004f84  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f84  08004f84  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  08004fe8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004fe8  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009492  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b3f  00000000  00000000  0002955a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087d  00000000  00000000  0002bba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018238  00000000  00000000  0002c425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7ab  00000000  00000000  0004465d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cea0  00000000  00000000  00050e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033bc  00000000  00000000  000ddca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000e1064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ed0 	.word	0x08004ed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08004ed0 	.word	0x08004ed0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_f2uiz>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	d20e      	bcs.n	8000b6a <__aeabi_f2uiz+0x22>
 8000b4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b50:	d30b      	bcc.n	8000b6a <__aeabi_f2uiz+0x22>
 8000b52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b5a:	d409      	bmi.n	8000b70 <__aeabi_f2uiz+0x28>
 8000b5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b64:	fa23 f002 	lsr.w	r0, r3, r2
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr
 8000b70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b74:	d101      	bne.n	8000b7a <__aeabi_f2uiz+0x32>
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	d102      	bne.n	8000b80 <__aeabi_f2uiz+0x38>
 8000b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <send_to_lcd>:


/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <send_to_lcd+0xa4>)
 8000ba0:	f002 f879 	bl	8002c96 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <send_to_lcd+0xa4>)
 8000bb8:	f002 f86d 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4817      	ldr	r0, [pc, #92]	; (8000c2c <send_to_lcd+0xa4>)
 8000bd0:	f002 f861 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	085b      	lsrs	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <send_to_lcd+0xa4>)
 8000be8:	f002 f855 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <send_to_lcd+0xa4>)
 8000bfc:	f002 f84b 	bl	8002c96 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <send_to_lcd+0xa4>)
 8000c08:	f002 f845 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f001 f947 	bl	8001ea0 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <send_to_lcd+0xa4>)
 8000c1a:	f002 f83c 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f001 f93e 	bl	8001ea0 <HAL_Delay>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff9f 	bl	8000b88 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff96 	bl	8000b88 <send_to_lcd>
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff85 	bl	8000b88 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff7c 	bl	8000b88 <send_to_lcd>
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <lcd_clear>:

void lcd_clear (void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff ffc7 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(2);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f001 f8fc 	bl	8001ea0 <HAL_Delay>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <lcd_put_cur+0x18>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d005      	beq.n	8000cce <lcd_put_cur+0x22>
 8000cc2:	e009      	b.n	8000cd8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cca:	603b      	str	r3, [r7, #0]
            break;
 8000ccc:	e004      	b.n	8000cd8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cd4:	603b      	str	r3, [r7, #0]
            break;
 8000cd6:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ffa7 	bl	8000c30 <lcd_send_cmd>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <lcd_init>:


void lcd_init (void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0

	HAL_Delay(10);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f001 f8d6 	bl	8001ea0 <HAL_Delay>
	lcd_send_cmd (0x02);
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f7ff ff9b 	bl	8000c30 <lcd_send_cmd>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000cfa:	2028      	movs	r0, #40	; 0x28
 8000cfc:	f7ff ff98 	bl	8000c30 <lcd_send_cmd>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d00:	2008      	movs	r0, #8
 8000d02:	f7ff ff95 	bl	8000c30 <lcd_send_cmd>
	lcd_send_cmd (0x01);  // clear display
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ff92 	bl	8000c30 <lcd_send_cmd>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f7ff ff8f 	bl	8000c30 <lcd_send_cmd>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d12:	200c      	movs	r0, #12
 8000d14:	f7ff ff8c 	bl	8000c30 <lcd_send_cmd>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d24:	e006      	b.n	8000d34 <lcd_send_string+0x18>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff98 	bl	8000c64 <lcd_send_data>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f4      	bne.n	8000d26 <lcd_send_string+0xa>

}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <displaySensorValueOnLCD>:




void displaySensorValueOnLCD(int sensorValue)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d58:	6018      	str	r0, [r3, #0]
    char sensorValueStr[500]; // Buffer for sensor value as string
    sprintf(sensorValueStr, "%d", sensorValue); // Convert integer to string using sprintf
 8000d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d62:	f107 0008 	add.w	r0, r7, #8
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4913      	ldr	r1, [pc, #76]	; (8000db8 <displaySensorValueOnLCD+0x70>)
 8000d6a:	f003 fbff 	bl	800456c <siprintf>

    // Display the sensor value on the LCD one character at a time
    for (int i = 0; sensorValueStr[i] != '\0'; i++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8000d74:	e00f      	b.n	8000d96 <displaySensorValueOnLCD+0x4e>
        lcd_send_data(sensorValueStr[i]);
 8000d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7a:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8000d7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff6c 	bl	8000c64 <lcd_send_data>
    for (int i = 0; sensorValueStr[i] != '\0'; i++) {
 8000d8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000d90:	3301      	adds	r3, #1
 8000d92:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8000d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9a:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8000d9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1e5      	bne.n	8000d76 <displaySensorValueOnLCD+0x2e>
    }
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	08004ee8 	.word	0x08004ee8

08000dbc <show>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void show()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	if(jj<2)
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <show+0x94>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	dc3b      	bgt.n	8000e40 <show+0x84>
	{

	    lcd_put_cur(0,0);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff ff6e 	bl	8000cac <lcd_put_cur>
	    displaySensorValueOnLCD(max_freq);
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <show+0x98>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ffb7 	bl	8000d48 <displaySensorValueOnLCD>

	     lcd_put_cur(0,5);
 8000dda:	2105      	movs	r1, #5
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff ff65 	bl	8000cac <lcd_put_cur>

	     displaySensorValueOnLCD(curr_freq);
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <show+0x9c>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ffae 	bl	8000d48 <displaySensorValueOnLCD>

	     lcd_put_cur(0,10);
 8000dec:	210a      	movs	r1, #10
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ff5c 	bl	8000cac <lcd_put_cur>
	     displaySensorValueOnLCD(min_freq);
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <show+0xa0>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ffa5 	bl	8000d48 <displaySensorValueOnLCD>


	     lcd_put_cur(1,0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff ff53 	bl	8000cac <lcd_put_cur>
	     displaySensorValueOnLCD(max_dc);
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <show+0xa4>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff9c 	bl	8000d48 <displaySensorValueOnLCD>

	    lcd_put_cur(1,5);
 8000e10:	2105      	movs	r1, #5
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff4a 	bl	8000cac <lcd_put_cur>
	    displaySensorValueOnLCD(curr_dc);
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <show+0xa8>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff93 	bl	8000d48 <displaySensorValueOnLCD>

	     lcd_put_cur(1,10);
 8000e22:	210a      	movs	r1, #10
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff ff41 	bl	8000cac <lcd_put_cur>
	     displaySensorValueOnLCD(min_dc);
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <show+0xac>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff8a 	bl	8000d48 <displaySensorValueOnLCD>
	     jj=jj+1;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <show+0x94>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <show+0x94>)
 8000e3c:	6013      	str	r3, [r2, #0]
	{
	 lcd_clear();
	 jj=0;
	}

}
 8000e3e:	e004      	b.n	8000e4a <show+0x8e>
	 lcd_clear();
 8000e40:	f7ff ff2a 	bl	8000c98 <lcd_clear>
	 jj=0;
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <show+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000164 	.word	0x20000164
 8000e54:	20000144 	.word	0x20000144
 8000e58:	20000146 	.word	0x20000146
 8000e5c:	20000148 	.word	0x20000148
 8000e60:	2000014a 	.word	0x2000014a
 8000e64:	2000014c 	.word	0x2000014c
 8000e68:	2000014e 	.word	0x2000014e

08000e6c <show1>:
void show1() {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
    if (jj < 2) {
 8000e72:	4b6a      	ldr	r3, [pc, #424]	; (800101c <show1+0x1b0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	f300 80c6 	bgt.w	8001008 <show1+0x19c>
        if (min_dc > max_dc) {
 8000e7c:	4b68      	ldr	r3, [pc, #416]	; (8001020 <show1+0x1b4>)
 8000e7e:	881a      	ldrh	r2, [r3, #0]
 8000e80:	4b68      	ldr	r3, [pc, #416]	; (8001024 <show1+0x1b8>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d904      	bls.n	8000e92 <show1+0x26>
            lcd_clear();
 8000e88:	f7ff ff06 	bl	8000c98 <lcd_clear>
            lcd_send_string(" ERROR   ");
 8000e8c:	4866      	ldr	r0, [pc, #408]	; (8001028 <show1+0x1bc>)
 8000e8e:	f7ff ff45 	bl	8000d1c <lcd_send_string>
        }
        if (min_freq > max_freq) {
 8000e92:	4b66      	ldr	r3, [pc, #408]	; (800102c <show1+0x1c0>)
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	4b66      	ldr	r3, [pc, #408]	; (8001030 <show1+0x1c4>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d904      	bls.n	8000ea8 <show1+0x3c>
            lcd_clear();
 8000e9e:	f7ff fefb 	bl	8000c98 <lcd_clear>
            lcd_send_string(" ERROR   ");
 8000ea2:	4861      	ldr	r0, [pc, #388]	; (8001028 <show1+0x1bc>)
 8000ea4:	f7ff ff3a 	bl	8000d1c <lcd_send_string>
        }
        if (max_freq > min_freq && max_dc > min_dc) {
 8000ea8:	4b61      	ldr	r3, [pc, #388]	; (8001030 <show1+0x1c4>)
 8000eaa:	881a      	ldrh	r2, [r3, #0]
 8000eac:	4b5f      	ldr	r3, [pc, #380]	; (800102c <show1+0x1c0>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f240 80ae 	bls.w	8001012 <show1+0x1a6>
 8000eb6:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <show1+0x1b8>)
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	4b59      	ldr	r3, [pc, #356]	; (8001020 <show1+0x1b4>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	f240 80a7 	bls.w	8001012 <show1+0x1a6>
            if (curr_freq > max_freq) {
 8000ec4:	4b5b      	ldr	r3, [pc, #364]	; (8001034 <show1+0x1c8>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	4b59      	ldr	r3, [pc, #356]	; (8001030 <show1+0x1c4>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d904      	bls.n	8000eda <show1+0x6e>
                dis_freq = max_freq;
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <show1+0x1c4>)
 8000ed2:	881a      	ldrh	r2, [r3, #0]
 8000ed4:	4b58      	ldr	r3, [pc, #352]	; (8001038 <show1+0x1cc>)
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	e01a      	b.n	8000f10 <show1+0xa4>
            } else if (curr_freq < min_freq) {
 8000eda:	4b56      	ldr	r3, [pc, #344]	; (8001034 <show1+0x1c8>)
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	4b53      	ldr	r3, [pc, #332]	; (800102c <show1+0x1c0>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d204      	bcs.n	8000ef0 <show1+0x84>
                dis_freq = min_freq;
 8000ee6:	4b51      	ldr	r3, [pc, #324]	; (800102c <show1+0x1c0>)
 8000ee8:	881a      	ldrh	r2, [r3, #0]
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <show1+0x1cc>)
 8000eec:	801a      	strh	r2, [r3, #0]
 8000eee:	e00f      	b.n	8000f10 <show1+0xa4>
            } else if (curr_freq > min_freq && curr_freq < max_freq) {
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <show1+0x1c8>)
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <show1+0x1c0>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d909      	bls.n	8000f10 <show1+0xa4>
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <show1+0x1c8>)
 8000efe:	881a      	ldrh	r2, [r3, #0]
 8000f00:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <show1+0x1c4>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d203      	bcs.n	8000f10 <show1+0xa4>
                dis_freq = curr_freq;
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <show1+0x1c8>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <show1+0x1cc>)
 8000f0e:	801a      	strh	r2, [r3, #0]
            }
            if (curr_dc > max_dc) {
 8000f10:	4b4a      	ldr	r3, [pc, #296]	; (800103c <show1+0x1d0>)
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	4b43      	ldr	r3, [pc, #268]	; (8001024 <show1+0x1b8>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d904      	bls.n	8000f26 <show1+0xba>
                dis_dc = max_dc;
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <show1+0x1b8>)
 8000f1e:	881a      	ldrh	r2, [r3, #0]
 8000f20:	4b47      	ldr	r3, [pc, #284]	; (8001040 <show1+0x1d4>)
 8000f22:	801a      	strh	r2, [r3, #0]
 8000f24:	e01a      	b.n	8000f5c <show1+0xf0>
            } else if (curr_dc < min_dc) {
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <show1+0x1d0>)
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <show1+0x1b4>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d204      	bcs.n	8000f3c <show1+0xd0>
                dis_dc = min_dc;
 8000f32:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <show1+0x1b4>)
 8000f34:	881a      	ldrh	r2, [r3, #0]
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <show1+0x1d4>)
 8000f38:	801a      	strh	r2, [r3, #0]
 8000f3a:	e00f      	b.n	8000f5c <show1+0xf0>
            } else if (curr_dc > min_dc && curr_dc < max_dc) {
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <show1+0x1d0>)
 8000f3e:	881a      	ldrh	r2, [r3, #0]
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <show1+0x1b4>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d909      	bls.n	8000f5c <show1+0xf0>
 8000f48:	4b3c      	ldr	r3, [pc, #240]	; (800103c <show1+0x1d0>)
 8000f4a:	881a      	ldrh	r2, [r3, #0]
 8000f4c:	4b35      	ldr	r3, [pc, #212]	; (8001024 <show1+0x1b8>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d203      	bcs.n	8000f5c <show1+0xf0>
                dis_dc = curr_dc;
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <show1+0x1d0>)
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <show1+0x1d4>)
 8000f5a:	801a      	strh	r2, [r3, #0]
            }

            lcd_put_cur(0, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff fea4 	bl	8000cac <lcd_put_cur>
            displaySensorValueOnLCD(max_freq);
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <show1+0x1c4>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feed 	bl	8000d48 <displaySensorValueOnLCD>
            lcd_put_cur(0, 5);
 8000f6e:	2105      	movs	r1, #5
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fe9b 	bl	8000cac <lcd_put_cur>
            displaySensorValueOnLCD(dis_freq);
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <show1+0x1cc>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fee4 	bl	8000d48 <displaySensorValueOnLCD>
            lcd_put_cur(0, 10);
 8000f80:	210a      	movs	r1, #10
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fe92 	bl	8000cac <lcd_put_cur>
            displaySensorValueOnLCD(min_freq);
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <show1+0x1c0>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fedb 	bl	8000d48 <displaySensorValueOnLCD>
            lcd_put_cur(1, 0);
 8000f92:	2100      	movs	r1, #0
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fe89 	bl	8000cac <lcd_put_cur>
            displaySensorValueOnLCD(max_dc);
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <show1+0x1b8>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fed2 	bl	8000d48 <displaySensorValueOnLCD>
            lcd_put_cur(1, 5);
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff fe80 	bl	8000cac <lcd_put_cur>
            displaySensorValueOnLCD(dis_dc);
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <show1+0x1d4>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fec9 	bl	8000d48 <displaySensorValueOnLCD>
            lcd_put_cur(1, 10);
 8000fb6:	210a      	movs	r1, #10
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fe77 	bl	8000cac <lcd_put_cur>
            displaySensorValueOnLCD(min_dc);
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <show1+0x1b4>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fec0 	bl	8000d48 <displaySensorValueOnLCD>

            float pre = 320000 / dis_freq;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <show1+0x1cc>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <show1+0x1d8>)
 8000fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fd63 	bl	8000aa0 <__aeabi_i2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	607b      	str	r3, [r7, #4]
            __HAL_TIM_SET_PRESCALER(&htim1, pre);
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <show1+0x1dc>)
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fdb0 	bl	8000b48 <__aeabi_f2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	62a3      	str	r3, [r4, #40]	; 0x28
            TIM1->CCR1 = dis_dc;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <show1+0x1d4>)
 8000fee:	881a      	ldrh	r2, [r3, #0]
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <show1+0x1e0>)
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CCR2 = dis_dc;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <show1+0x1d4>)
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <show1+0x1e0>)
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
            jj = jj + 1;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <show1+0x1b0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a06      	ldr	r2, [pc, #24]	; (800101c <show1+0x1b0>)
 8001004:	6013      	str	r3, [r2, #0]
        }
    } else {
        lcd_clear();
        jj = 0;
    }
}
 8001006:	e004      	b.n	8001012 <show1+0x1a6>
        lcd_clear();
 8001008:	f7ff fe46 	bl	8000c98 <lcd_clear>
        jj = 0;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <show1+0x1b0>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	20000164 	.word	0x20000164
 8001020:	2000014e 	.word	0x2000014e
 8001024:	2000014a 	.word	0x2000014a
 8001028:	08004eec 	.word	0x08004eec
 800102c:	20000148 	.word	0x20000148
 8001030:	20000144 	.word	0x20000144
 8001034:	20000146 	.word	0x20000146
 8001038:	20000150 	.word	0x20000150
 800103c:	2000014c 	.word	0x2000014c
 8001040:	20000152 	.word	0x20000152
 8001044:	0004e200 	.word	0x0004e200
 8001048:	200000a8 	.word	0x200000a8
 800104c:	40012c00 	.word	0x40012c00

08001050 <adc>:

void adc ()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	          sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8001054:	4bb6      	ldr	r3, [pc, #728]	; (8001330 <adc+0x2e0>)
 8001056:	2201      	movs	r2, #1
 8001058:	605a      	str	r2, [r3, #4]
		  	  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800105a:	4bb5      	ldr	r3, [pc, #724]	; (8001330 <adc+0x2e0>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
		  	  sConfigPrivate.Channel = ADC_CHANNEL_9;
 8001060:	4bb3      	ldr	r3, [pc, #716]	; (8001330 <adc+0x2e0>)
 8001062:	2209      	movs	r2, #9
 8001064:	601a      	str	r2, [r3, #0]
		      HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001066:	49b2      	ldr	r1, [pc, #712]	; (8001330 <adc+0x2e0>)
 8001068:	48b2      	ldr	r0, [pc, #712]	; (8001334 <adc+0x2e4>)
 800106a:	f001 fa01 	bl	8002470 <HAL_ADC_ConfigChannel>
		  	  HAL_ADC_Start(&hadc1);
 800106e:	48b1      	ldr	r0, [pc, #708]	; (8001334 <adc+0x2e4>)
 8001070:	f001 f812 	bl	8002098 <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc1,1000);
 8001074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001078:	48ae      	ldr	r0, [pc, #696]	; (8001334 <adc+0x2e4>)
 800107a:	f001 f8e7 	bl	800224c <HAL_ADC_PollForConversion>
		  	  readValue1 = HAL_ADC_GetValue(&hadc1);
 800107e:	48ad      	ldr	r0, [pc, #692]	; (8001334 <adc+0x2e4>)
 8001080:	f001 f9ea 	bl	8002458 <HAL_ADC_GetValue>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	4bab      	ldr	r3, [pc, #684]	; (8001338 <adc+0x2e8>)
 800108a:	801a      	strh	r2, [r3, #0]
		 	 if(readValue1> 3850)
 800108c:	4baa      	ldr	r3, [pc, #680]	; (8001338 <adc+0x2e8>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	f640 720a 	movw	r2, #3850	; 0xf0a
 8001094:	4293      	cmp	r3, r2
 8001096:	d903      	bls.n	80010a0 <adc+0x50>
		 	  			   	  {
		 	  			   		readValue1  =3850;
 8001098:	4ba7      	ldr	r3, [pc, #668]	; (8001338 <adc+0x2e8>)
 800109a:	f640 720a 	movw	r2, #3850	; 0xf0a
 800109e:	801a      	strh	r2, [r3, #0]
		 	  			   	  }

		  	  HAL_ADC_Stop(&hadc1);
 80010a0:	48a4      	ldr	r0, [pc, #656]	; (8001334 <adc+0x2e4>)
 80010a2:	f001 f8a7 	bl	80021f4 <HAL_ADC_Stop>
		  	  sConfigPrivate.Channel = ADC_CHANNEL_0;
 80010a6:	4ba2      	ldr	r3, [pc, #648]	; (8001330 <adc+0x2e0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
		  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80010ac:	49a0      	ldr	r1, [pc, #640]	; (8001330 <adc+0x2e0>)
 80010ae:	48a1      	ldr	r0, [pc, #644]	; (8001334 <adc+0x2e4>)
 80010b0:	f001 f9de 	bl	8002470 <HAL_ADC_ConfigChannel>
		  	  HAL_ADC_Start(&hadc1);
 80010b4:	489f      	ldr	r0, [pc, #636]	; (8001334 <adc+0x2e4>)
 80010b6:	f000 ffef 	bl	8002098 <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80010ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010be:	489d      	ldr	r0, [pc, #628]	; (8001334 <adc+0x2e4>)
 80010c0:	f001 f8c4 	bl	800224c <HAL_ADC_PollForConversion>
		  	  readValue2 = HAL_ADC_GetValue(&hadc1);
 80010c4:	489b      	ldr	r0, [pc, #620]	; (8001334 <adc+0x2e4>)
 80010c6:	f001 f9c7 	bl	8002458 <HAL_ADC_GetValue>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b9b      	ldr	r3, [pc, #620]	; (800133c <adc+0x2ec>)
 80010d0:	801a      	strh	r2, [r3, #0]
		  	 if(readValue2> 3850)
 80010d2:	4b9a      	ldr	r3, [pc, #616]	; (800133c <adc+0x2ec>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	f640 720a 	movw	r2, #3850	; 0xf0a
 80010da:	4293      	cmp	r3, r2
 80010dc:	d903      	bls.n	80010e6 <adc+0x96>
		  			   	  {
		  			   		readValue2  =3850;
 80010de:	4b97      	ldr	r3, [pc, #604]	; (800133c <adc+0x2ec>)
 80010e0:	f640 720a 	movw	r2, #3850	; 0xf0a
 80010e4:	801a      	strh	r2, [r3, #0]
		  			   	  }
		  	  HAL_ADC_Stop(&hadc1);
 80010e6:	4893      	ldr	r0, [pc, #588]	; (8001334 <adc+0x2e4>)
 80010e8:	f001 f884 	bl	80021f4 <HAL_ADC_Stop>
		  	  sConfigPrivate.Channel = ADC_CHANNEL_2;
 80010ec:	4b90      	ldr	r3, [pc, #576]	; (8001330 <adc+0x2e0>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	601a      	str	r2, [r3, #0]
		  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80010f2:	498f      	ldr	r1, [pc, #572]	; (8001330 <adc+0x2e0>)
 80010f4:	488f      	ldr	r0, [pc, #572]	; (8001334 <adc+0x2e4>)
 80010f6:	f001 f9bb 	bl	8002470 <HAL_ADC_ConfigChannel>
		  	  HAL_ADC_Start(&hadc1);
 80010fa:	488e      	ldr	r0, [pc, #568]	; (8001334 <adc+0x2e4>)
 80010fc:	f000 ffcc 	bl	8002098 <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc1,1000);
 8001100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001104:	488b      	ldr	r0, [pc, #556]	; (8001334 <adc+0x2e4>)
 8001106:	f001 f8a1 	bl	800224c <HAL_ADC_PollForConversion>
		  	  readValue3 = HAL_ADC_GetValue(&hadc1);
 800110a:	488a      	ldr	r0, [pc, #552]	; (8001334 <adc+0x2e4>)
 800110c:	f001 f9a4 	bl	8002458 <HAL_ADC_GetValue>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b8a      	ldr	r3, [pc, #552]	; (8001340 <adc+0x2f0>)
 8001116:	801a      	strh	r2, [r3, #0]
		  	 if(readValue3> 3850)
 8001118:	4b89      	ldr	r3, [pc, #548]	; (8001340 <adc+0x2f0>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	f640 720a 	movw	r2, #3850	; 0xf0a
 8001120:	4293      	cmp	r3, r2
 8001122:	d903      	bls.n	800112c <adc+0xdc>
		  			   	  {
		  			   		readValue3  =3850;
 8001124:	4b86      	ldr	r3, [pc, #536]	; (8001340 <adc+0x2f0>)
 8001126:	f640 720a 	movw	r2, #3850	; 0xf0a
 800112a:	801a      	strh	r2, [r3, #0]
		  			   	  }
		  	  HAL_ADC_Stop(&hadc1);
 800112c:	4881      	ldr	r0, [pc, #516]	; (8001334 <adc+0x2e4>)
 800112e:	f001 f861 	bl	80021f4 <HAL_ADC_Stop>
		  	  sConfigPrivate.Channel = ADC_CHANNEL_6;
 8001132:	4b7f      	ldr	r3, [pc, #508]	; (8001330 <adc+0x2e0>)
 8001134:	2206      	movs	r2, #6
 8001136:	601a      	str	r2, [r3, #0]
		      HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001138:	497d      	ldr	r1, [pc, #500]	; (8001330 <adc+0x2e0>)
 800113a:	487e      	ldr	r0, [pc, #504]	; (8001334 <adc+0x2e4>)
 800113c:	f001 f998 	bl	8002470 <HAL_ADC_ConfigChannel>
	     	  HAL_ADC_Start(&hadc1);
 8001140:	487c      	ldr	r0, [pc, #496]	; (8001334 <adc+0x2e4>)
 8001142:	f000 ffa9 	bl	8002098 <HAL_ADC_Start>
	     	  HAL_ADC_PollForConversion(&hadc1,1000);
 8001146:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800114a:	487a      	ldr	r0, [pc, #488]	; (8001334 <adc+0x2e4>)
 800114c:	f001 f87e 	bl	800224c <HAL_ADC_PollForConversion>
		   	  readValue4 = HAL_ADC_GetValue(&hadc1);
 8001150:	4878      	ldr	r0, [pc, #480]	; (8001334 <adc+0x2e4>)
 8001152:	f001 f981 	bl	8002458 <HAL_ADC_GetValue>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <adc+0x2f4>)
 800115c:	801a      	strh	r2, [r3, #0]
		   	 if(readValue4> 3850)
 800115e:	4b79      	ldr	r3, [pc, #484]	; (8001344 <adc+0x2f4>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	f640 720a 	movw	r2, #3850	; 0xf0a
 8001166:	4293      	cmp	r3, r2
 8001168:	d903      	bls.n	8001172 <adc+0x122>
		   			   	  {
		   			   		readValue4  =3850;
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <adc+0x2f4>)
 800116c:	f640 720a 	movw	r2, #3850	; 0xf0a
 8001170:	801a      	strh	r2, [r3, #0]
		   			   	  }
		   	  HAL_ADC_Stop(&hadc1);
 8001172:	4870      	ldr	r0, [pc, #448]	; (8001334 <adc+0x2e4>)
 8001174:	f001 f83e 	bl	80021f4 <HAL_ADC_Stop>
		   	  sConfigPrivate.Channel = ADC_CHANNEL_5;
 8001178:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <adc+0x2e0>)
 800117a:	2205      	movs	r2, #5
 800117c:	601a      	str	r2, [r3, #0]
		  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800117e:	496c      	ldr	r1, [pc, #432]	; (8001330 <adc+0x2e0>)
 8001180:	486c      	ldr	r0, [pc, #432]	; (8001334 <adc+0x2e4>)
 8001182:	f001 f975 	bl	8002470 <HAL_ADC_ConfigChannel>
		   	  HAL_ADC_Start(&hadc1);
 8001186:	486b      	ldr	r0, [pc, #428]	; (8001334 <adc+0x2e4>)
 8001188:	f000 ff86 	bl	8002098 <HAL_ADC_Start>
		   	  HAL_ADC_PollForConversion(&hadc1,1000);
 800118c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001190:	4868      	ldr	r0, [pc, #416]	; (8001334 <adc+0x2e4>)
 8001192:	f001 f85b 	bl	800224c <HAL_ADC_PollForConversion>
		   	  readValue5 = HAL_ADC_GetValue(&hadc1);
 8001196:	4867      	ldr	r0, [pc, #412]	; (8001334 <adc+0x2e4>)
 8001198:	f001 f95e 	bl	8002458 <HAL_ADC_GetValue>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b69      	ldr	r3, [pc, #420]	; (8001348 <adc+0x2f8>)
 80011a2:	801a      	strh	r2, [r3, #0]
		   	 if(readValue5> 3850)
 80011a4:	4b68      	ldr	r3, [pc, #416]	; (8001348 <adc+0x2f8>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	f640 720a 	movw	r2, #3850	; 0xf0a
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d903      	bls.n	80011b8 <adc+0x168>
		   			   	  {
		   			   		readValue5  =3850;
 80011b0:	4b65      	ldr	r3, [pc, #404]	; (8001348 <adc+0x2f8>)
 80011b2:	f640 720a 	movw	r2, #3850	; 0xf0a
 80011b6:	801a      	strh	r2, [r3, #0]
		   			   	  }
		   	  HAL_ADC_Stop(&hadc1);
 80011b8:	485e      	ldr	r0, [pc, #376]	; (8001334 <adc+0x2e4>)
 80011ba:	f001 f81b 	bl	80021f4 <HAL_ADC_Stop>
			  sConfigPrivate.Channel = ADC_CHANNEL_4;
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <adc+0x2e0>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	601a      	str	r2, [r3, #0]
		   	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80011c4:	495a      	ldr	r1, [pc, #360]	; (8001330 <adc+0x2e0>)
 80011c6:	485b      	ldr	r0, [pc, #364]	; (8001334 <adc+0x2e4>)
 80011c8:	f001 f952 	bl	8002470 <HAL_ADC_ConfigChannel>
		      HAL_ADC_Start(&hadc1);
 80011cc:	4859      	ldr	r0, [pc, #356]	; (8001334 <adc+0x2e4>)
 80011ce:	f000 ff63 	bl	8002098 <HAL_ADC_Start>
		   	  HAL_ADC_PollForConversion(&hadc1,1000);
 80011d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d6:	4857      	ldr	r0, [pc, #348]	; (8001334 <adc+0x2e4>)
 80011d8:	f001 f838 	bl	800224c <HAL_ADC_PollForConversion>
		   	  readValue6 = HAL_ADC_GetValue(&hadc1);
 80011dc:	4855      	ldr	r0, [pc, #340]	; (8001334 <adc+0x2e4>)
 80011de:	f001 f93b 	bl	8002458 <HAL_ADC_GetValue>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b59      	ldr	r3, [pc, #356]	; (800134c <adc+0x2fc>)
 80011e8:	801a      	strh	r2, [r3, #0]
		   	 if(readValue6> 3850)
 80011ea:	4b58      	ldr	r3, [pc, #352]	; (800134c <adc+0x2fc>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f640 720a 	movw	r2, #3850	; 0xf0a
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d903      	bls.n	80011fe <adc+0x1ae>
		   			   	  {
		   			   		readValue6  =3850;
 80011f6:	4b55      	ldr	r3, [pc, #340]	; (800134c <adc+0x2fc>)
 80011f8:	f640 720a 	movw	r2, #3850	; 0xf0a
 80011fc:	801a      	strh	r2, [r3, #0]
		   			   	  }
		   	  HAL_ADC_Stop(&hadc1);
 80011fe:	484d      	ldr	r0, [pc, #308]	; (8001334 <adc+0x2e4>)
 8001200:	f000 fff8 	bl	80021f4 <HAL_ADC_Stop>

			  max_freq=(readValue1/3.85)*5;
 8001204:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <adc+0x2e8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f8f3 	bl	80003f4 <__aeabi_i2d>
 800120e:	a346      	add	r3, pc, #280	; (adr r3, 8001328 <adc+0x2d8>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fa82 	bl	800071c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <adc+0x300>)
 8001226:	f7ff f94f 	bl	80004c8 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fb5b 	bl	80008ec <__aeabi_d2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <adc+0x304>)
 800123c:	801a      	strh	r2, [r3, #0]
			  curr_freq=(readValue2/3.85)*5;
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <adc+0x2ec>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8d6 	bl	80003f4 <__aeabi_i2d>
 8001248:	a337      	add	r3, pc, #220	; (adr r3, 8001328 <adc+0x2d8>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff fa65 	bl	800071c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <adc+0x300>)
 8001260:	f7ff f932 	bl	80004c8 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fb3e 	bl	80008ec <__aeabi_d2uiz>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b38      	ldr	r3, [pc, #224]	; (8001358 <adc+0x308>)
 8001276:	801a      	strh	r2, [r3, #0]
			  min_freq=(readValue3/3.85)*5;
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <adc+0x2f0>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f8b9 	bl	80003f4 <__aeabi_i2d>
 8001282:	a329      	add	r3, pc, #164	; (adr r3, 8001328 <adc+0x2d8>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff fa48 	bl	800071c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <adc+0x300>)
 800129a:	f7ff f915 	bl	80004c8 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fb21 	bl	80008ec <__aeabi_d2uiz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <adc+0x30c>)
 80012b0:	801a      	strh	r2, [r3, #0]
			  max_dc=(readValue4/38.5);
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <adc+0x2f4>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f89c 	bl	80003f4 <__aeabi_i2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <adc+0x310>)
 80012c2:	f7ff fa2b 	bl	800071c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fb0d 	bl	80008ec <__aeabi_d2uiz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <adc+0x314>)
 80012d8:	801a      	strh	r2, [r3, #0]
			  curr_dc=(readValue5/38.5);
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <adc+0x2f8>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f888 	bl	80003f4 <__aeabi_i2d>
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <adc+0x310>)
 80012ea:	f7ff fa17 	bl	800071c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff faf9 	bl	80008ec <__aeabi_d2uiz>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <adc+0x318>)
 8001300:	801a      	strh	r2, [r3, #0]
			  min_dc=(readValue6/38.5);
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <adc+0x2fc>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f874 	bl	80003f4 <__aeabi_i2d>
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <adc+0x310>)
 8001312:	f7ff fa03 	bl	800071c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fae5 	bl	80008ec <__aeabi_d2uiz>
 8001322:	4603      	mov	r3, r0
 8001324:	e022      	b.n	800136c <adc+0x31c>
 8001326:	bf00      	nop
 8001328:	cccccccd 	.word	0xcccccccd
 800132c:	400ecccc 	.word	0x400ecccc
 8001330:	20000168 	.word	0x20000168
 8001334:	20000078 	.word	0x20000078
 8001338:	20000138 	.word	0x20000138
 800133c:	2000013a 	.word	0x2000013a
 8001340:	2000013c 	.word	0x2000013c
 8001344:	2000013e 	.word	0x2000013e
 8001348:	20000140 	.word	0x20000140
 800134c:	20000142 	.word	0x20000142
 8001350:	40140000 	.word	0x40140000
 8001354:	20000144 	.word	0x20000144
 8001358:	20000146 	.word	0x20000146
 800135c:	20000148 	.word	0x20000148
 8001360:	40434000 	.word	0x40434000
 8001364:	2000014a 	.word	0x2000014a
 8001368:	2000014c 	.word	0x2000014c
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b02      	ldr	r3, [pc, #8]	; (8001378 <adc+0x328>)
 8001370:	801a      	strh	r2, [r3, #0]


}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000014e 	.word	0x2000014e
 800137c:	00000000 	.word	0x00000000

08001380 <adc1>:
void adc1 ()
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	          sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8001384:	4b42      	ldr	r3, [pc, #264]	; (8001490 <adc1+0x110>)
 8001386:	2201      	movs	r2, #1
 8001388:	605a      	str	r2, [r3, #4]
		  	  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <adc1+0x110>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]

		  	  sConfigPrivate.Channel = ADC_CHANNEL_0;
 8001390:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <adc1+0x110>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
		  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001396:	493e      	ldr	r1, [pc, #248]	; (8001490 <adc1+0x110>)
 8001398:	483e      	ldr	r0, [pc, #248]	; (8001494 <adc1+0x114>)
 800139a:	f001 f869 	bl	8002470 <HAL_ADC_ConfigChannel>
		  	  HAL_ADC_Start(&hadc1);
 800139e:	483d      	ldr	r0, [pc, #244]	; (8001494 <adc1+0x114>)
 80013a0:	f000 fe7a 	bl	8002098 <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80013a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a8:	483a      	ldr	r0, [pc, #232]	; (8001494 <adc1+0x114>)
 80013aa:	f000 ff4f 	bl	800224c <HAL_ADC_PollForConversion>
		  	  readValue2 = HAL_ADC_GetValue(&hadc1);
 80013ae:	4839      	ldr	r0, [pc, #228]	; (8001494 <adc1+0x114>)
 80013b0:	f001 f852 	bl	8002458 <HAL_ADC_GetValue>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b37      	ldr	r3, [pc, #220]	; (8001498 <adc1+0x118>)
 80013ba:	801a      	strh	r2, [r3, #0]
		  	 if(readValue2> 3850)
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <adc1+0x118>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	f640 720a 	movw	r2, #3850	; 0xf0a
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d903      	bls.n	80013d0 <adc1+0x50>
		  			   	  {
		  			   		readValue2  =3850;
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <adc1+0x118>)
 80013ca:	f640 720a 	movw	r2, #3850	; 0xf0a
 80013ce:	801a      	strh	r2, [r3, #0]
		  			   	  }
		  	  HAL_ADC_Stop(&hadc1);
 80013d0:	4830      	ldr	r0, [pc, #192]	; (8001494 <adc1+0x114>)
 80013d2:	f000 ff0f 	bl	80021f4 <HAL_ADC_Stop>

		   	  sConfigPrivate.Channel = ADC_CHANNEL_5;
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <adc1+0x110>)
 80013d8:	2205      	movs	r2, #5
 80013da:	601a      	str	r2, [r3, #0]
		  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80013dc:	492c      	ldr	r1, [pc, #176]	; (8001490 <adc1+0x110>)
 80013de:	482d      	ldr	r0, [pc, #180]	; (8001494 <adc1+0x114>)
 80013e0:	f001 f846 	bl	8002470 <HAL_ADC_ConfigChannel>
		   	  HAL_ADC_Start(&hadc1);
 80013e4:	482b      	ldr	r0, [pc, #172]	; (8001494 <adc1+0x114>)
 80013e6:	f000 fe57 	bl	8002098 <HAL_ADC_Start>
		   	  HAL_ADC_PollForConversion(&hadc1,1000);
 80013ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013ee:	4829      	ldr	r0, [pc, #164]	; (8001494 <adc1+0x114>)
 80013f0:	f000 ff2c 	bl	800224c <HAL_ADC_PollForConversion>
		   	  readValue5 = HAL_ADC_GetValue(&hadc1);
 80013f4:	4827      	ldr	r0, [pc, #156]	; (8001494 <adc1+0x114>)
 80013f6:	f001 f82f 	bl	8002458 <HAL_ADC_GetValue>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <adc1+0x11c>)
 8001400:	801a      	strh	r2, [r3, #0]
		   	 if(readValue5> 3850)
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <adc1+0x11c>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	f640 720a 	movw	r2, #3850	; 0xf0a
 800140a:	4293      	cmp	r3, r2
 800140c:	d903      	bls.n	8001416 <adc1+0x96>
		   			   	  {
		   			   		readValue5  =3850;
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <adc1+0x11c>)
 8001410:	f640 720a 	movw	r2, #3850	; 0xf0a
 8001414:	801a      	strh	r2, [r3, #0]
		   			   	  }
		   	  HAL_ADC_Stop(&hadc1);
 8001416:	481f      	ldr	r0, [pc, #124]	; (8001494 <adc1+0x114>)
 8001418:	f000 feec 	bl	80021f4 <HAL_ADC_Stop>


	  curr_freq=(readValue2/3.85)*5;
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <adc1+0x118>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ffe7 	bl	80003f4 <__aeabi_i2d>
 8001426:	a318      	add	r3, pc, #96	; (adr r3, 8001488 <adc1+0x108>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f976 	bl	800071c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <adc1+0x120>)
 800143e:	f7ff f843 	bl	80004c8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fa4f 	bl	80008ec <__aeabi_d2uiz>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <adc1+0x124>)
 8001454:	801a      	strh	r2, [r3, #0]

	  curr_dc=(readValue5/38.5);
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <adc1+0x11c>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ffca 	bl	80003f4 <__aeabi_i2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <adc1+0x128>)
 8001466:	f7ff f959 	bl	800071c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fa3b 	bl	80008ec <__aeabi_d2uiz>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <adc1+0x12c>)
 800147c:	801a      	strh	r2, [r3, #0]



}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	f3af 8000 	nop.w
 8001488:	cccccccd 	.word	0xcccccccd
 800148c:	400ecccc 	.word	0x400ecccc
 8001490:	20000168 	.word	0x20000168
 8001494:	20000078 	.word	0x20000078
 8001498:	2000013a 	.word	0x2000013a
 800149c:	20000140 	.word	0x20000140
 80014a0:	40140000 	.word	0x40140000
 80014a4:	20000146 	.word	0x20000146
 80014a8:	40434000 	.word	0x40434000
 80014ac:	2000014c 	.word	0x2000014c

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f000 fc92 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f888 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f000 fa3c 	bl	8001938 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014c0:	f000 f8da 	bl	8001678 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014c4:	f000 f916 	bl	80016f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014c8:	f000 f9c0 	bl	800184c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80014cc:	f7ff fc0d 	bl	8000cea <lcd_init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4835      	ldr	r0, [pc, #212]	; (80015a8 <main+0xf8>)
 80014d4:	f002 fa08 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80014d8:	2100      	movs	r1, #0
 80014da:	4833      	ldr	r0, [pc, #204]	; (80015a8 <main+0xf8>)
 80014dc:	f002 fed4 	bl	8004288 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014e0:	2104      	movs	r1, #4
 80014e2:	4831      	ldr	r0, [pc, #196]	; (80015a8 <main+0xf8>)
 80014e4:	f002 fa00 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80014e8:	2104      	movs	r1, #4
 80014ea:	482f      	ldr	r0, [pc, #188]	; (80015a8 <main+0xf8>)
 80014ec:	f002 fecc 	bl	8004288 <HAL_TIMEx_PWMN_Start>
  while (1)
	  while (1) {
	      // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	      // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);

	      x = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	482e      	ldr	r0, [pc, #184]	; (80015ac <main+0xfc>)
 80014f4:	f001 fbb8 	bl	8002c68 <HAL_GPIO_ReadPin>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <main+0x100>)
 80014fe:	601a      	str	r2, [r3, #0]

	      if (x == 0) {
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <main+0x100>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d108      	bne.n	800151a <main+0x6a>
	          z++;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <main+0x104>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <main+0x104>)
 8001510:	6013      	str	r3, [r2, #0]
	          HAL_Delay(700);
 8001512:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001516:	f000 fcc3 	bl	8001ea0 <HAL_Delay>
	      }

	      if (z == 0) {
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <main+0x104>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11a      	bne.n	8001558 <main+0xa8>
	          if (xx == 0) {
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <main+0x108>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <main+0x94>
	              lcd_clear();
 800152a:	f7ff fbb5 	bl	8000c98 <lcd_clear>
	              lcd_send_string("SETUP MODE");
 800152e:	4823      	ldr	r0, [pc, #140]	; (80015bc <main+0x10c>)
 8001530:	f7ff fbf4 	bl	8000d1c <lcd_send_string>
	              lcd_clear();
 8001534:	f7ff fbb0 	bl	8000c98 <lcd_clear>
	              xx = 1;
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <main+0x108>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
	              yy = 0;
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <main+0x110>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
	          }

	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154a:	481e      	ldr	r0, [pc, #120]	; (80015c4 <main+0x114>)
 800154c:	f001 fba3 	bl	8002c96 <HAL_GPIO_WritePin>
	          adc();
 8001550:	f7ff fd7e 	bl	8001050 <adc>
	          show();
 8001554:	f7ff fc32 	bl	8000dbc <show>
	      }

	      if (z == 1) {
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <main+0x104>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d11a      	bne.n	8001596 <main+0xe6>
	          if (yy == 0) {
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <main+0x110>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10c      	bne.n	8001582 <main+0xd2>
	              lcd_clear();
 8001568:	f7ff fb96 	bl	8000c98 <lcd_clear>
	              lcd_send_string("OUTPUT MODE");
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <main+0x118>)
 800156e:	f7ff fbd5 	bl	8000d1c <lcd_send_string>
	              lcd_clear();
 8001572:	f7ff fb91 	bl	8000c98 <lcd_clear>
	              xx = 0;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <main+0x108>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
	              yy = 1;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <main+0x110>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
	          }

	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001588:	480e      	ldr	r0, [pc, #56]	; (80015c4 <main+0x114>)
 800158a:	f001 fb84 	bl	8002c96 <HAL_GPIO_WritePin>
	          adc1();
 800158e:	f7ff fef7 	bl	8001380 <adc1>
	          show1();
 8001592:	f7ff fc6b 	bl	8000e6c <show1>
	      }

	      if (z == 2) {
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <main+0x104>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d1a8      	bne.n	80014f0 <main+0x40>
	          z = 0;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <main+0x104>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
	      x = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80015a4:	e7a4      	b.n	80014f0 <main+0x40>
 80015a6:	bf00      	nop
 80015a8:	200000a8 	.word	0x200000a8
 80015ac:	40010c00 	.word	0x40010c00
 80015b0:	20000154 	.word	0x20000154
 80015b4:	20000158 	.word	0x20000158
 80015b8:	2000015c 	.word	0x2000015c
 80015bc:	08004ef8 	.word	0x08004ef8
 80015c0:	20000160 	.word	0x20000160
 80015c4:	40011000 	.word	0x40011000
 80015c8:	08004f04 	.word	0x08004f04

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b094      	sub	sp, #80	; 0x50
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	2228      	movs	r2, #40	; 0x28
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 ffe6 	bl	80045ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fc:	2302      	movs	r3, #2
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	2301      	movs	r3, #1
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001604:	2310      	movs	r3, #16
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001608:	2302      	movs	r3, #2
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800160c:	2300      	movs	r3, #0
 800160e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001610:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fb54 	bl	8002cc8 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001626:	f000 fa01 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2101      	movs	r1, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fdc1 	bl	80031cc <HAL_RCC_ClockConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001650:	f000 f9ec 	bl	8001a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001654:	2302      	movs	r3, #2
 8001656:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001658:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800165c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	4618      	mov	r0, r3
 8001662:	f001 ff2d 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800166c:	f000 f9de 	bl	8001a2c <Error_Handler>
  }
}
 8001670:	bf00      	nop
 8001672:	3750      	adds	r7, #80	; 0x50
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */


  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_ADC1_Init+0x74>)
 800168a:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <MX_ADC1_Init+0x78>)
 800168c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_ADC1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_ADC1_Init+0x74>)
 8001696:	2201      	movs	r2, #1
 8001698:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_ADC1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_ADC1_Init+0x74>)
 80016a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_ADC1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_ADC1_Init+0x74>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_ADC1_Init+0x74>)
 80016b6:	f000 fc17 	bl	8001ee8 <HAL_ADC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80016c0:	f000 f9b4 	bl	8001a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016c4:	2309      	movs	r3, #9
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_ADC1_Init+0x74>)
 80016d6:	f000 fecb 	bl	8002470 <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016e0:	f000 f9a4 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000078 	.word	0x20000078
 80016f0:	40012400 	.word	0x40012400

080016f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b096      	sub	sp, #88	; 0x58
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2220      	movs	r2, #32
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f002 ff3d 	bl	80045ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001732:	4b44      	ldr	r3, [pc, #272]	; (8001844 <MX_TIM1_Init+0x150>)
 8001734:	4a44      	ldr	r2, [pc, #272]	; (8001848 <MX_TIM1_Init+0x154>)
 8001736:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <MX_TIM1_Init+0x150>)
 800173a:	2201      	movs	r2, #1
 800173c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <MX_TIM1_Init+0x150>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001744:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <MX_TIM1_Init+0x150>)
 8001746:	2264      	movs	r2, #100	; 0x64
 8001748:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <MX_TIM1_Init+0x150>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <MX_TIM1_Init+0x150>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <MX_TIM1_Init+0x150>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800175c:	4839      	ldr	r0, [pc, #228]	; (8001844 <MX_TIM1_Init+0x150>)
 800175e:	f002 f81b 	bl	8003798 <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001768:	f000 f960 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001776:	4619      	mov	r1, r3
 8001778:	4832      	ldr	r0, [pc, #200]	; (8001844 <MX_TIM1_Init+0x150>)
 800177a:	f002 fa19 	bl	8003bb0 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001784:	f000 f952 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001788:	482e      	ldr	r0, [pc, #184]	; (8001844 <MX_TIM1_Init+0x150>)
 800178a:	f002 f854 	bl	8003836 <HAL_TIM_PWM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001794:	f000 f94a 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a4:	4619      	mov	r1, r3
 80017a6:	4827      	ldr	r0, [pc, #156]	; (8001844 <MX_TIM1_Init+0x150>)
 80017a8:	f002 fe0c 	bl	80043c4 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80017b2:	f000 f93b 	bl	8001a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	; 0x60
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	481a      	ldr	r0, [pc, #104]	; (8001844 <MX_TIM1_Init+0x150>)
 80017dc:	f002 f926 	bl	8003a2c <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80017e6:	f000 f921 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	2204      	movs	r2, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4814      	ldr	r0, [pc, #80]	; (8001844 <MX_TIM1_Init+0x150>)
 80017f4:	f002 f91a 	bl	8003a2c <HAL_TIM_PWM_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80017fe:	f000 f915 	bl	8001a2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 6.4;
 800180e:	2306      	movs	r3, #6
 8001810:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4807      	ldr	r0, [pc, #28]	; (8001844 <MX_TIM1_Init+0x150>)
 8001826:	f002 fe2b 	bl	8004480 <HAL_TIMEx_ConfigBreakDeadTime>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001830:	f000 f8fc 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <MX_TIM1_Init+0x150>)
 8001836:	f000 f9b5 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 800183a:	bf00      	nop
 800183c:	3758      	adds	r7, #88	; 0x58
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200000a8 	.word	0x200000a8
 8001848:	40012c00 	.word	0x40012c00

0800184c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */


  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <MX_TIM2_Init+0xe8>)
 800187e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <MX_TIM2_Init+0xe8>)
 8001886:	2201      	movs	r2, #1
 8001888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <MX_TIM2_Init+0xe8>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <MX_TIM2_Init+0xe8>)
 8001892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <MX_TIM2_Init+0xe8>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <MX_TIM2_Init+0xe8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a4:	4823      	ldr	r0, [pc, #140]	; (8001934 <MX_TIM2_Init+0xe8>)
 80018a6:	f001 ff77 	bl	8003798 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018b0:	f000 f8bc 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	4619      	mov	r1, r3
 80018c0:	481c      	ldr	r0, [pc, #112]	; (8001934 <MX_TIM2_Init+0xe8>)
 80018c2:	f002 f975 	bl	8003bb0 <HAL_TIM_ConfigClockSource>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018cc:	f000 f8ae 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018d0:	4818      	ldr	r0, [pc, #96]	; (8001934 <MX_TIM2_Init+0xe8>)
 80018d2:	f001 ffb0 	bl	8003836 <HAL_TIM_PWM_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018dc:	f000 f8a6 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	4619      	mov	r1, r3
 80018ee:	4811      	ldr	r0, [pc, #68]	; (8001934 <MX_TIM2_Init+0xe8>)
 80018f0:	f002 fd68 	bl	80043c4 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018fa:	f000 f897 	bl	8001a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <MX_TIM2_Init+0xe8>)
 8001916:	f002 f889 	bl	8003a2c <HAL_TIM_PWM_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001920:	f000 f884 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <MX_TIM2_Init+0xe8>)
 8001926:	f000 f93d 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 800192a:	bf00      	nop
 800192c:	3738      	adds	r7, #56	; 0x38
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200000f0 	.word	0x200000f0

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <MX_GPIO_Init+0xe8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a33      	ldr	r2, [pc, #204]	; (8001a20 <MX_GPIO_Init+0xe8>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <MX_GPIO_Init+0xe8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <MX_GPIO_Init+0xe8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <MX_GPIO_Init+0xe8>)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <MX_GPIO_Init+0xe8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <MX_GPIO_Init+0xe8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <MX_GPIO_Init+0xe8>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <MX_GPIO_Init+0xe8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_GPIO_Init+0xe8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <MX_GPIO_Init+0xe8>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_GPIO_Init+0xe8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	481c      	ldr	r0, [pc, #112]	; (8001a24 <MX_GPIO_Init+0xec>)
 80019b4:	f001 f96f 	bl	8002c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80019be:	481a      	ldr	r0, [pc, #104]	; (8001a28 <MX_GPIO_Init+0xf0>)
 80019c0:	f001 f969 	bl	8002c96 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	4619      	mov	r1, r3
 80019dc:	4811      	ldr	r0, [pc, #68]	; (8001a24 <MX_GPIO_Init+0xec>)
 80019de:	f000 ffbf 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80019e2:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80019e6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	480b      	ldr	r0, [pc, #44]	; (8001a28 <MX_GPIO_Init+0xf0>)
 80019fc:	f000 ffb0 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_GPIO_Init+0xf0>)
 8001a14:	f000 ffa4 	bl	8002960 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40010c00 	.word	0x40010c00

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6193      	str	r3, [r2, #24]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_MspInit+0x60>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_MspInit+0x60>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_ADC_MspInit+0x98>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d137      	bne.n	8001b2c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_ADC_MspInit+0x9c>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b04:	237f      	movs	r3, #127	; 0x7f
 8001b06:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	4619      	mov	r1, r3
 8001b12:	480a      	ldr	r0, [pc, #40]	; (8001b3c <HAL_ADC_MspInit+0xa0>)
 8001b14:	f000 ff24 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <HAL_ADC_MspInit+0xa4>)
 8001b28:	f000 ff1a 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40012400 	.word	0x40012400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40010c00 	.word	0x40010c00

08001b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_TIM_Base_MspInit+0x58>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10c      	bne.n	8001b70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b6e:	e010      	b.n	8001b92 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d10b      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_TIM_MspPostInit+0x110>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d143      	bne.n	8001c4c <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a35      	ldr	r2, [pc, #212]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bf4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0318 	add.w	r3, r7, #24
 8001c06:	4619      	mov	r1, r3
 8001c08:	482c      	ldr	r0, [pc, #176]	; (8001cbc <HAL_TIM_MspPostInit+0x118>)
 8001c0a:	f000 fea9 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2302      	movs	r3, #2
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4827      	ldr	r0, [pc, #156]	; (8001cc0 <HAL_TIM_MspPostInit+0x11c>)
 8001c22:	f000 fe9d 	bl	8002960 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_TIM_MspPostInit+0x120>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_TIM_MspPostInit+0x120>)
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c4a:	e02f      	b.n	8001cac <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d12a      	bne.n	8001cac <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6193      	str	r3, [r2, #24]
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_TIM_MspPostInit+0x114>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4619      	mov	r1, r3
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <HAL_TIM_MspPostInit+0x118>)
 8001c84:	f000 fe6c 	bl	8002960 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_TIM_MspPostInit+0x120>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_TIM_MspPostInit+0x120>)
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	6053      	str	r3, [r2, #4]
}
 8001cac:	bf00      	nop
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40012c00 	.word	0x40012c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	40010c00 	.word	0x40010c00
 8001cc4:	40010000 	.word	0x40010000

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <NMI_Handler+0x4>

08001cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0e:	f000 f8ab 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f002 fc38 	bl	80045bc <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20005000 	.word	0x20005000
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	20000174 	.word	0x20000174
 8001d80:	200002c8 	.word	0x200002c8

08001d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d90:	f7ff fff8 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d96:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dac:	4c09      	ldr	r4, [pc, #36]	; (8001dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dba:	f002 fc05 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dbe:	f7ff fb77 	bl	80014b0 <main>
  bx lr
 8001dc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001dcc:	08004f8c 	.word	0x08004f8c
  ldr r2, =_sbss
 8001dd0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001dd4:	200002c4 	.word	0x200002c4

08001dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC1_2_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_Init+0x28>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_Init+0x28>)
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 fd83 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fe1e 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fd8d 	bl	8002946 <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 fd63 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_IncTick+0x1c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_IncTick+0x20>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_IncTick+0x20>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000178 	.word	0x20000178

08001e8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <HAL_GetTick+0x10>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000178 	.word	0x20000178

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffe0 	bl	8001e8c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0be      	b.n	8002088 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fdb8 	bl	8001a9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fbf1 	bl	8002714 <ADC_ConversionStop_Disable>
 8001f32:	4603      	mov	r3, r0
 8001f34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8099 	bne.w	8002076 <HAL_ADC_Init+0x18e>
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 8095 	bne.w	8002076 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f54:	f023 0302 	bic.w	r3, r3, #2
 8001f58:	f043 0202 	orr.w	r2, r3, #2
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7b1b      	ldrb	r3, [r3, #12]
 8001f6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f80:	d003      	beq.n	8001f8a <HAL_ADC_Init+0xa2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_ADC_Init+0xa8>
 8001f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f8e:	e000      	b.n	8001f92 <HAL_ADC_Init+0xaa>
 8001f90:	2300      	movs	r3, #0
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7d1b      	ldrb	r3, [r3, #20]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d119      	bne.n	8001fd4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7b1b      	ldrb	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	035a      	lsls	r2, r3, #13
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e00b      	b.n	8001fd4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_ADC_Init+0x1a8>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002004:	d003      	beq.n	800200e <HAL_ADC_Init+0x126>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d104      	bne.n	8002018 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	3b01      	subs	r3, #1
 8002014:	051b      	lsls	r3, r3, #20
 8002016:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	430a      	orrs	r2, r1
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_ADC_Init+0x1ac>)
 8002034:	4013      	ands	r3, r2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	429a      	cmp	r2, r3
 800203a:	d10b      	bne.n	8002054 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002052:	e018      	b.n	8002086 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	f023 0312 	bic.w	r3, r3, #18
 800205c:	f043 0210 	orr.w	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002074:	e007      	b.n	8002086 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002086:	7dfb      	ldrb	r3, [r7, #23]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	ffe1f7fd 	.word	0xffe1f7fd
 8002094:	ff1f0efe 	.word	0xff1f0efe

08002098 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Start+0x1a>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e098      	b.n	80021e4 <HAL_ADC_Start+0x14c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fad0 	bl	8002660 <ADC_Enable>
 80020c0:	4603      	mov	r3, r0
 80020c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 8087 	bne.w	80021da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a41      	ldr	r2, [pc, #260]	; (80021ec <HAL_ADC_Start+0x154>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d105      	bne.n	80020f6 <HAL_ADC_Start+0x5e>
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_ADC_Start+0x158>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d115      	bne.n	8002122 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d026      	beq.n	800215e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002118:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002120:	e01d      	b.n	800215e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <HAL_ADC_Start+0x158>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_ADC_Start+0xaa>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2b      	ldr	r2, [pc, #172]	; (80021ec <HAL_ADC_Start+0x154>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10d      	bne.n	800215e <HAL_ADC_Start+0xc6>
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_ADC_Start+0x158>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002156:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	f023 0206 	bic.w	r2, r3, #6
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
 8002176:	e002      	b.n	800217e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f06f 0202 	mvn.w	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800219a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800219e:	d113      	bne.n	80021c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_ADC_Start+0x154>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_ADC_Start+0x158>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d108      	bne.n	80021c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	e00c      	b.n	80021e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e003      	b.n	80021e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40012800 	.word	0x40012800
 80021f0:	40012400 	.word	0x40012400

080021f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADC_Stop+0x1a>
 800220a:	2302      	movs	r3, #2
 800220c:	e01a      	b.n	8002244 <HAL_ADC_Stop+0x50>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fa7c 	bl	8002714 <ADC_ConversionStop_Disable>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002262:	f7ff fe13 	bl	8001e8c <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	f043 0220 	orr.w	r2, r3, #32
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0d3      	b.n	8002436 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d131      	bne.n	8002300 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d12a      	bne.n	8002300 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022aa:	e021      	b.n	80022f0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b2:	d01d      	beq.n	80022f0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_ADC_PollForConversion+0x7e>
 80022ba:	f7ff fde7 	bl	8001e8c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d212      	bcs.n	80022f0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0a2      	b.n	8002436 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0d6      	beq.n	80022ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022fe:	e070      	b.n	80023e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002300:	4b4f      	ldr	r3, [pc, #316]	; (8002440 <HAL_ADC_PollForConversion+0x1f4>)
 8002302:	681c      	ldr	r4, [r3, #0]
 8002304:	2002      	movs	r0, #2
 8002306:	f001 f991 	bl	800362c <HAL_RCCEx_GetPeriphCLKFreq>
 800230a:	4603      	mov	r3, r0
 800230c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <HAL_ADC_PollForConversion+0x1f8>)
 8002318:	400b      	ands	r3, r1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_ADC_PollForConversion+0x104>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68d9      	ldr	r1, [r3, #12]
 8002324:	4b48      	ldr	r3, [pc, #288]	; (8002448 <HAL_ADC_PollForConversion+0x1fc>)
 8002326:	400b      	ands	r3, r1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d111      	bne.n	8002350 <HAL_ADC_PollForConversion+0x104>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_ADC_PollForConversion+0x200>)
 8002334:	400b      	ands	r3, r1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d108      	bne.n	800234c <HAL_ADC_PollForConversion+0x100>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_ADC_PollForConversion+0x204>)
 8002342:	400b      	ands	r3, r1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_PollForConversion+0x100>
 8002348:	2314      	movs	r3, #20
 800234a:	e020      	b.n	800238e <HAL_ADC_PollForConversion+0x142>
 800234c:	2329      	movs	r3, #41	; 0x29
 800234e:	e01e      	b.n	800238e <HAL_ADC_PollForConversion+0x142>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <HAL_ADC_PollForConversion+0x200>)
 8002358:	400b      	ands	r3, r1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_ADC_PollForConversion+0x120>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_ADC_PollForConversion+0x204>)
 8002366:	400b      	ands	r3, r1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <HAL_ADC_PollForConversion+0x13c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_ADC_PollForConversion+0x208>)
 8002374:	400b      	ands	r3, r1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <HAL_ADC_PollForConversion+0x140>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68d9      	ldr	r1, [r3, #12]
 8002380:	4b34      	ldr	r3, [pc, #208]	; (8002454 <HAL_ADC_PollForConversion+0x208>)
 8002382:	400b      	ands	r3, r1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_PollForConversion+0x140>
 8002388:	2354      	movs	r3, #84	; 0x54
 800238a:	e000      	b.n	800238e <HAL_ADC_PollForConversion+0x142>
 800238c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002394:	e021      	b.n	80023da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d01a      	beq.n	80023d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_ADC_PollForConversion+0x168>
 80023a4:	f7ff fd72 	bl	8001e8c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d20f      	bcs.n	80023d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d90b      	bls.n	80023d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f043 0204 	orr.w	r2, r3, #4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e030      	b.n	8002436 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3301      	adds	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d8d9      	bhi.n	8002396 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0212 	mvn.w	r2, #18
 80023ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002402:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002406:	d115      	bne.n	8002434 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	bf00      	nop
 8002440:	20000000 	.word	0x20000000
 8002444:	24924924 	.word	0x24924924
 8002448:	00924924 	.word	0x00924924
 800244c:	12492492 	.word	0x12492492
 8002450:	00492492 	.word	0x00492492
 8002454:	00249249 	.word	0x00249249

08002458 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x20>
 800248c:	2302      	movs	r3, #2
 800248e:	e0dc      	b.n	800264a <HAL_ADC_ConfigChannel+0x1da>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d81c      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b05      	subs	r3, #5
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4019      	ands	r1, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b05      	subs	r3, #5
 80024cc:	fa00 f203 	lsl.w	r2, r0, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
 80024d8:	e03c      	b.n	8002554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d81c      	bhi.n	800251c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b23      	subs	r3, #35	; 0x23
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	4019      	ands	r1, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b23      	subs	r3, #35	; 0x23
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
 800251a:	e01b      	b.n	8002554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	3b41      	subs	r3, #65	; 0x41
 800252e:	221f      	movs	r2, #31
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	4019      	ands	r1, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b41      	subs	r3, #65	; 0x41
 8002548:	fa00 f203 	lsl.w	r2, r0, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b09      	cmp	r3, #9
 800255a:	d91c      	bls.n	8002596 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68d9      	ldr	r1, [r3, #12]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	2207      	movs	r2, #7
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	4019      	ands	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6898      	ldr	r0, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	3b1e      	subs	r3, #30
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	e019      	b.n	80025ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6919      	ldr	r1, [r3, #16]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	4019      	ands	r1, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6898      	ldr	r0, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d003      	beq.n	80025da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025d6:	2b11      	cmp	r3, #17
 80025d8:	d132      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_ADC_ConfigChannel+0x1e4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d125      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d126      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002600:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b10      	cmp	r3, #16
 8002608:	d11a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_ADC_ConfigChannel+0x1e8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a13      	ldr	r2, [pc, #76]	; (800265c <HAL_ADC_ConfigChannel+0x1ec>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9a      	lsrs	r2, r3, #18
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002620:	e002      	b.n	8002628 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x1b2>
 800262e:	e007      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	40012400 	.word	0x40012400
 8002658:	20000000 	.word	0x20000000
 800265c:	431bde83 	.word	0x431bde83

08002660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d040      	beq.n	8002700 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800268e:	4b1f      	ldr	r3, [pc, #124]	; (800270c <ADC_Enable+0xac>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <ADC_Enable+0xb0>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	0c9b      	lsrs	r3, r3, #18
 800269a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800269c:	e002      	b.n	80026a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f9      	bne.n	800269e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026aa:	f7ff fbef 	bl	8001e8c <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026b0:	e01f      	b.n	80026f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026b2:	f7ff fbeb 	bl	8001e8c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d918      	bls.n	80026f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d011      	beq.n	80026f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e007      	b.n	8002702 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d1d8      	bne.n	80026b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000
 8002710:	431bde83 	.word	0x431bde83

08002714 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d12e      	bne.n	800278c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800273e:	f7ff fba5 	bl	8001e8c <HAL_GetTick>
 8002742:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002744:	e01b      	b.n	800277e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002746:	f7ff fba1 	bl	8001e8c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d914      	bls.n	800277e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10d      	bne.n	800277e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e007      	b.n	800278e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d0dc      	beq.n	8002746 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff90 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff49 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff5e 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff90 	bl	8002850 <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5f 	bl	80027fc <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffb0 	bl	80028b4 <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b08b      	sub	sp, #44	; 0x2c
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	e169      	b.n	8002c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002974:	2201      	movs	r2, #1
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 8158 	bne.w	8002c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a9a      	ldr	r2, [pc, #616]	; (8002c00 <HAL_GPIO_Init+0x2a0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d05e      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 800299c:	4a98      	ldr	r2, [pc, #608]	; (8002c00 <HAL_GPIO_Init+0x2a0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d875      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029a2:	4a98      	ldr	r2, [pc, #608]	; (8002c04 <HAL_GPIO_Init+0x2a4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d058      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029a8:	4a96      	ldr	r2, [pc, #600]	; (8002c04 <HAL_GPIO_Init+0x2a4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d86f      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029ae:	4a96      	ldr	r2, [pc, #600]	; (8002c08 <HAL_GPIO_Init+0x2a8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d052      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029b4:	4a94      	ldr	r2, [pc, #592]	; (8002c08 <HAL_GPIO_Init+0x2a8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d869      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029ba:	4a94      	ldr	r2, [pc, #592]	; (8002c0c <HAL_GPIO_Init+0x2ac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04c      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029c0:	4a92      	ldr	r2, [pc, #584]	; (8002c0c <HAL_GPIO_Init+0x2ac>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d863      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029c6:	4a92      	ldr	r2, [pc, #584]	; (8002c10 <HAL_GPIO_Init+0x2b0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d046      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029cc:	4a90      	ldr	r2, [pc, #576]	; (8002c10 <HAL_GPIO_Init+0x2b0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d85d      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029d2:	2b12      	cmp	r3, #18
 80029d4:	d82a      	bhi.n	8002a2c <HAL_GPIO_Init+0xcc>
 80029d6:	2b12      	cmp	r3, #18
 80029d8:	d859      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_GPIO_Init+0x80>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a5b 	.word	0x08002a5b
 80029e4:	08002a35 	.word	0x08002a35
 80029e8:	08002a47 	.word	0x08002a47
 80029ec:	08002a89 	.word	0x08002a89
 80029f0:	08002a8f 	.word	0x08002a8f
 80029f4:	08002a8f 	.word	0x08002a8f
 80029f8:	08002a8f 	.word	0x08002a8f
 80029fc:	08002a8f 	.word	0x08002a8f
 8002a00:	08002a8f 	.word	0x08002a8f
 8002a04:	08002a8f 	.word	0x08002a8f
 8002a08:	08002a8f 	.word	0x08002a8f
 8002a0c:	08002a8f 	.word	0x08002a8f
 8002a10:	08002a8f 	.word	0x08002a8f
 8002a14:	08002a8f 	.word	0x08002a8f
 8002a18:	08002a8f 	.word	0x08002a8f
 8002a1c:	08002a8f 	.word	0x08002a8f
 8002a20:	08002a8f 	.word	0x08002a8f
 8002a24:	08002a3d 	.word	0x08002a3d
 8002a28:	08002a51 	.word	0x08002a51
 8002a2c:	4a79      	ldr	r2, [pc, #484]	; (8002c14 <HAL_GPIO_Init+0x2b4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a32:	e02c      	b.n	8002a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	623b      	str	r3, [r7, #32]
          break;
 8002a3a:	e029      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	3304      	adds	r3, #4
 8002a42:	623b      	str	r3, [r7, #32]
          break;
 8002a44:	e024      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	623b      	str	r3, [r7, #32]
          break;
 8002a4e:	e01f      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	330c      	adds	r3, #12
 8002a56:	623b      	str	r3, [r7, #32]
          break;
 8002a58:	e01a      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a62:	2304      	movs	r3, #4
 8002a64:	623b      	str	r3, [r7, #32]
          break;
 8002a66:	e013      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a70:	2308      	movs	r3, #8
 8002a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	611a      	str	r2, [r3, #16]
          break;
 8002a7a:	e009      	b.n	8002a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	615a      	str	r2, [r3, #20]
          break;
 8002a86:	e003      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
          break;
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          break;
 8002a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2bff      	cmp	r3, #255	; 0xff
 8002a94:	d801      	bhi.n	8002a9a <HAL_GPIO_Init+0x13a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	e001      	b.n	8002a9e <HAL_GPIO_Init+0x13e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2bff      	cmp	r3, #255	; 0xff
 8002aa4:	d802      	bhi.n	8002aac <HAL_GPIO_Init+0x14c>
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x152>
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	3b08      	subs	r3, #8
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	210f      	movs	r1, #15
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80b1 	beq.w	8002c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_GPIO_Init+0x2b8>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	; (8002c18 <HAL_GPIO_Init+0x2b8>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_GPIO_Init+0x2b8>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_GPIO_Init+0x2bc>)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <HAL_GPIO_Init+0x2c0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_GPIO_Init+0x1ec>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <HAL_GPIO_Init+0x2c4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00d      	beq.n	8002b48 <HAL_GPIO_Init+0x1e8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3e      	ldr	r2, [pc, #248]	; (8002c28 <HAL_GPIO_Init+0x2c8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <HAL_GPIO_Init+0x1e4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3d      	ldr	r2, [pc, #244]	; (8002c2c <HAL_GPIO_Init+0x2cc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_GPIO_Init+0x1e0>
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e004      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e002      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	4093      	lsls	r3, r2
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b5e:	492f      	ldr	r1, [pc, #188]	; (8002c1c <HAL_GPIO_Init+0x2bc>)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	492c      	ldr	r1, [pc, #176]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4928      	ldr	r1, [pc, #160]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4922      	ldr	r1, [pc, #136]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	491e      	ldr	r1, [pc, #120]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4918      	ldr	r1, [pc, #96]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e006      	b.n	8002be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4914      	ldr	r1, [pc, #80]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d021      	beq.n	8002c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	490e      	ldr	r1, [pc, #56]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
 8002bfc:	e021      	b.n	8002c42 <HAL_GPIO_Init+0x2e2>
 8002bfe:	bf00      	nop
 8002c00:	10320000 	.word	0x10320000
 8002c04:	10310000 	.word	0x10310000
 8002c08:	10220000 	.word	0x10220000
 8002c0c:	10210000 	.word	0x10210000
 8002c10:	10120000 	.word	0x10120000
 8002c14:	10110000 	.word	0x10110000
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40010800 	.word	0x40010800
 8002c24:	40010c00 	.word	0x40010c00
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40011400 	.word	0x40011400
 8002c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	4909      	ldr	r1, [pc, #36]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	3301      	adds	r3, #1
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f47f ae8e 	bne.w	8002974 <HAL_GPIO_Init+0x14>
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	372c      	adds	r7, #44	; 0x2c
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e001      	b.n	8002c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	807b      	strh	r3, [r7, #2]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ca6:	787b      	ldrb	r3, [r7, #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cb2:	e003      	b.n	8002cbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	041a      	lsls	r2, r3, #16
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	611a      	str	r2, [r3, #16]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e272      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8087 	beq.w	8002df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d00c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf4:	4b8f      	ldr	r3, [pc, #572]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d112      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5e>
 8002d00:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d10b      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0e:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d06c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x12c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d168      	bne.n	8002df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e24c      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x76>
 8002d30:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	e02e      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x98>
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b78      	ldr	r3, [pc, #480]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0xbc>
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a71      	ldr	r2, [pc, #452]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d84:	4b6b      	ldr	r3, [pc, #428]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a67      	ldr	r2, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff f872 	bl	8001e8c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff f86e 	bl	8001e8c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e200      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xe4>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7ff f85e 	bl	8001e8c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7ff f85a 	bl	8001e8c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1ec      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x10c>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e02:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x18c>
 8002e1a:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x176>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1c0      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4939      	ldr	r1, [pc, #228]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7ff f813 	bl	8001e8c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7ff f80f 	bl	8001e8c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1a1      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4927      	ldr	r1, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fff2 	bl	8001e8c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fe ffee 	bl	8001e8c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e180      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03a      	beq.n	8002f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d019      	beq.n	8002f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7fe ffd2 	bl	8001e8c <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fe ffce 	bl	8001e8c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e160      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f000 faba 	bl	8003484 <RCC_Delay>
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7fe ffb8 	bl	8001e8c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1e:	e00f      	b.n	8002f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe ffb4 	bl	8001e8c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d908      	bls.n	8002f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e146      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	42420000 	.word	0x42420000
 8002f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b92      	ldr	r3, [pc, #584]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e9      	bne.n	8002f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a6 	beq.w	80030a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]
 8002f76:	4b85      	ldr	r3, [pc, #532]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_RCC_OscConfig+0x4c8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x4c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x4c8>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe ff75 	bl	8001e8c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe ff71 	bl	8001e8c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e103      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4c8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x312>
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e02d      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x334>
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a66      	ldr	r2, [pc, #408]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	e01c      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x356>
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a5d      	ldr	r2, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 800301e:	4b5b      	ldr	r3, [pc, #364]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a5a      	ldr	r2, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6213      	str	r3, [r2, #32]
 800302a:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7fe ff25 	bl	8001e8c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe ff21 	bl	8001e8c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0b1      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x37e>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fe ff0f 	bl	8001e8c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe ff0b 	bl	8001e8c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e09b      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8087 	beq.w	80031be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d061      	beq.n	8003180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d146      	bne.n	8003152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_RCC_OscConfig+0x4cc>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe fedf 	bl	8001e8c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe fedb 	bl	8001e8c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e06d      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e4:	4b29      	ldr	r3, [pc, #164]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4921      	ldr	r1, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	4b1f      	ldr	r3, [pc, #124]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a19      	ldr	r1, [r3, #32]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	430b      	orrs	r3, r1
 800311e:	491b      	ldr	r1, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x4cc>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe feaf 	bl	8001e8c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe feab 	bl	8001e8c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e03d      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x46a>
 8003150:	e035      	b.n	80031be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_RCC_OscConfig+0x4cc>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fe98 	bl	8001e8c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fe94 	bl	8001e8c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e026      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_OscConfig+0x4c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x498>
 800317e:	e01e      	b.n	80031be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e019      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x500>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000

080031cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0d0      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d910      	bls.n	8003210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b67      	ldr	r3, [pc, #412]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4965      	ldr	r1, [pc, #404]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b8      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003240:	4b53      	ldr	r3, [pc, #332]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800324a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	494d      	ldr	r1, [pc, #308]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d040      	beq.n	80032ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d115      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e073      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06b      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4936      	ldr	r1, [pc, #216]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032bc:	f7fe fde6 	bl	8001e8c <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe fde2 	bl	8001e8c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e053      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d210      	bcs.n	800331c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4922      	ldr	r1, [pc, #136]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e032      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4916      	ldr	r1, [pc, #88]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335a:	f000 f821 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800335e:	4602      	mov	r2, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	490a      	ldr	r1, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	5ccb      	ldrb	r3, [r1, r3]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1cc>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1d0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fd44 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40022000 	.word	0x40022000
 8003390:	40021000 	.word	0x40021000
 8003394:	08004f10 	.word	0x08004f10
 8003398:	20000000 	.word	0x20000000
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_GetSysClockFreq+0x94>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x30>
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x36>
 80033ce:	e027      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_RCC_GetSysClockFreq+0x98>)
 80033d2:	613b      	str	r3, [r7, #16]
      break;
 80033d4:	e027      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_RCC_GetSysClockFreq+0x9c>)
 80033e0:	5cd3      	ldrb	r3, [r2, r3]
 80033e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_RCC_GetSysClockFreq+0x94>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0c5b      	lsrs	r3, r3, #17
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_RCC_GetSysClockFreq+0x98>)
 8003402:	fb03 f202 	mul.w	r2, r3, r2
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e004      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	613b      	str	r3, [r7, #16]
      break;
 800341e:	e002      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCC_GetSysClockFreq+0x98>)
 8003422:	613b      	str	r3, [r7, #16]
      break;
 8003424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003426:	693b      	ldr	r3, [r7, #16]
}
 8003428:	4618      	mov	r0, r3
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	007a1200 	.word	0x007a1200
 800343c:	08004f28 	.word	0x08004f28
 8003440:	08004f38 	.word	0x08004f38
 8003444:	003d0900 	.word	0x003d0900

08003448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <HAL_RCC_GetHCLKFreq+0x10>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	20000000 	.word	0x20000000

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003460:	f7ff fff2 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	0adb      	lsrs	r3, r3, #11
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	08004f20 	.word	0x08004f20

08003484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <RCC_Delay+0x34>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <RCC_Delay+0x38>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034a0:	bf00      	nop
  }
  while (Delay --);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1e5a      	subs	r2, r3, #1
 80034a6:	60fa      	str	r2, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f9      	bne.n	80034a0 <RCC_Delay+0x1c>
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	20000000 	.word	0x20000000
 80034bc:	10624dd3 	.word	0x10624dd3

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d07d      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034dc:	2300      	movs	r3, #0
 80034de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e0:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ec:	4b4c      	ldr	r3, [pc, #304]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a4b      	ldr	r2, [pc, #300]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f6:	61d3      	str	r3, [r2, #28]
 80034f8:	4b49      	ldr	r3, [pc, #292]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d118      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003514:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a42      	ldr	r2, [pc, #264]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800351a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003520:	f7fe fcb4 	bl	8001e8c <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	e008      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003528:	f7fe fcb0 	bl	8001e8c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e06d      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003546:	4b36      	ldr	r3, [pc, #216]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d02e      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	d027      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800356e:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003574:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800357a:	4a29      	ldr	r2, [pc, #164]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d014      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fe fc7f 	bl	8001e8c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe fc7b 	bl	8001e8c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e036      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ee      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4917      	ldr	r1, [pc, #92]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b14      	ldr	r3, [pc, #80]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e4:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	490b      	ldr	r1, [pc, #44]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4904      	ldr	r1, [pc, #16]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	40007000 	.word	0x40007000
 8003628:	42420440 	.word	0x42420440

0800362c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b10      	cmp	r3, #16
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b10      	cmp	r3, #16
 8003652:	f200 808a 	bhi.w	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d045      	beq.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d075      	beq.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003662:	e082      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003664:	4b46      	ldr	r3, [pc, #280]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800366a:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d07b      	beq.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a41      	ldr	r2, [pc, #260]	; (8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d015      	beq.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368e:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	0c5b      	lsrs	r3, r3, #17
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	4a3b      	ldr	r2, [pc, #236]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036a8:	4a38      	ldr	r2, [pc, #224]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	e004      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4a34      	ldr	r2, [pc, #208]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036c4:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d0:	d102      	bne.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	61bb      	str	r3, [r7, #24]
      break;
 80036d6:	e04a      	b.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	61bb      	str	r3, [r7, #24]
      break;
 80036e6:	e042      	b.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f8:	d108      	bne.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e01f      	b.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003716:	d109      	bne.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003724:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e00f      	b.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003736:	d11c      	bne.n	8003772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d016      	beq.n	8003772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003744:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003748:	61bb      	str	r3, [r7, #24]
      break;
 800374a:	e012      	b.n	8003772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800374c:	e011      	b.n	8003772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800374e:	f7ff fe85 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0b9b      	lsrs	r3, r3, #14
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	3301      	adds	r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	61bb      	str	r3, [r7, #24]
      break;
 8003768:	e004      	b.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003772:	bf00      	nop
    }
  }
  return (frequency);
 8003774:	69bb      	ldr	r3, [r7, #24]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	08004f3c 	.word	0x08004f3c
 8003788:	08004f4c 	.word	0x08004f4c
 800378c:	007a1200 	.word	0x007a1200
 8003790:	003d0900 	.word	0x003d0900
 8003794:	aaaaaaab 	.word	0xaaaaaaab

08003798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e041      	b.n	800382e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe f9c0 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 fab2 	bl	8003d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e041      	b.n	80038cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f839 	bl	80038d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f000 fa63 	bl	8003d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start+0x24>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e022      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d109      	bne.n	8003926 <HAL_TIM_PWM_Start+0x3e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e015      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start+0x58>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e008      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e05e      	b.n	8003a18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0x82>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	e013      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0x92>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003978:	e00b      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0xa2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003988:	e003      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fc50 	bl	8004240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_TIM_PWM_Start+0x138>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_TIM_PWM_Start+0x138>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIM_PWM_Start+0xfa>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d009      	beq.n	80039e2 <HAL_TIM_PWM_Start+0xfa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_TIM_PWM_Start+0x13c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIM_PWM_Start+0xfa>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_TIM_PWM_Start+0x140>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d010      	beq.n	8003a16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a04:	e007      	b.n	8003a16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800

08003a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0ae      	b.n	8003ba8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	f200 809f 	bhi.w	8003b98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003b99 	.word	0x08003b99
 8003a68:	08003b99 	.word	0x08003b99
 8003a6c:	08003b99 	.word	0x08003b99
 8003a70:	08003ad5 	.word	0x08003ad5
 8003a74:	08003b99 	.word	0x08003b99
 8003a78:	08003b99 	.word	0x08003b99
 8003a7c:	08003b99 	.word	0x08003b99
 8003a80:	08003b17 	.word	0x08003b17
 8003a84:	08003b99 	.word	0x08003b99
 8003a88:	08003b99 	.word	0x08003b99
 8003a8c:	08003b99 	.word	0x08003b99
 8003a90:	08003b57 	.word	0x08003b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9b2 	bl	8003e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0208 	orr.w	r2, r2, #8
 8003aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0204 	bic.w	r2, r2, #4
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	619a      	str	r2, [r3, #24]
      break;
 8003ad2:	e064      	b.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f9f8 	bl	8003ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6999      	ldr	r1, [r3, #24]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	021a      	lsls	r2, r3, #8
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	619a      	str	r2, [r3, #24]
      break;
 8003b14:	e043      	b.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fa41 	bl	8003fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0208 	orr.w	r2, r2, #8
 8003b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0204 	bic.w	r2, r2, #4
 8003b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69d9      	ldr	r1, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	61da      	str	r2, [r3, #28]
      break;
 8003b54:	e023      	b.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa8b 	bl	8004078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	021a      	lsls	r2, r3, #8
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	61da      	str	r2, [r3, #28]
      break;
 8003b96:	e002      	b.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_ConfigClockSource+0x1c>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e0b4      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x186>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d03e      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0xd4>
 8003c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0a:	f200 8087 	bhi.w	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	f000 8086 	beq.w	8003d22 <HAL_TIM_ConfigClockSource+0x172>
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1a:	d87f      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b70      	cmp	r3, #112	; 0x70
 8003c1e:	d01a      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0xa6>
 8003c20:	2b70      	cmp	r3, #112	; 0x70
 8003c22:	d87b      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b60      	cmp	r3, #96	; 0x60
 8003c26:	d050      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x11a>
 8003c28:	2b60      	cmp	r3, #96	; 0x60
 8003c2a:	d877      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c2c:	2b50      	cmp	r3, #80	; 0x50
 8003c2e:	d03c      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0xfa>
 8003c30:	2b50      	cmp	r3, #80	; 0x50
 8003c32:	d873      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d058      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x13a>
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d86f      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c3c:	2b30      	cmp	r3, #48	; 0x30
 8003c3e:	d064      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x15a>
 8003c40:	2b30      	cmp	r3, #48	; 0x30
 8003c42:	d86b      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d060      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x15a>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d867      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d05c      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x15a>
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d05a      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x15a>
 8003c54:	e062      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c66:	f000 facc 	bl	8004202 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	609a      	str	r2, [r3, #8]
      break;
 8003c82:	e04f      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c94:	f000 fab5 	bl	8004202 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca6:	609a      	str	r2, [r3, #8]
      break;
 8003ca8:	e03c      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 fa2c 	bl	8004114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2150      	movs	r1, #80	; 0x50
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa83 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e02c      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fa4a 	bl	8004170 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2160      	movs	r1, #96	; 0x60
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa73 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e01c      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f000 fa0c 	bl	8004114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fa63 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003d08:	e00c      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f000 fa5a 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003d1a:	e003      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d20:	e000      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a29      	ldr	r2, [pc, #164]	; (8003df8 <TIM_Base_SetConfig+0xb8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_Base_SetConfig+0x30>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d007      	beq.n	8003d70 <TIM_Base_SetConfig+0x30>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <TIM_Base_SetConfig+0xbc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_Base_SetConfig+0x30>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <TIM_Base_SetConfig+0xc0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <TIM_Base_SetConfig+0xb8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0x62>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <TIM_Base_SetConfig+0xbc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0x62>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <TIM_Base_SetConfig+0xc0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <TIM_Base_SetConfig+0xb8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d103      	bne.n	8003de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	615a      	str	r2, [r3, #20]
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800

08003e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f023 0201 	bic.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 0302 	bic.w	r3, r3, #2
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <TIM_OC1_SetConfig+0xc8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10c      	bne.n	8003e7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0308 	bic.w	r3, r3, #8
 8003e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <TIM_OC1_SetConfig+0xc8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d111      	bne.n	8003ea6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00

08003ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f023 0210 	bic.w	r2, r3, #16
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0320 	bic.w	r3, r3, #32
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <TIM_OC2_SetConfig+0xd0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d10d      	bne.n	8003f4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <TIM_OC2_SetConfig+0xd0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d113      	bne.n	8003f7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	621a      	str	r2, [r3, #32]
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00

08003fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <TIM_OC3_SetConfig+0xd0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10d      	bne.n	800401e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800401c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <TIM_OC3_SetConfig+0xd0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d113      	bne.n	800404e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800402c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00

08004078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	031b      	lsls	r3, r3, #12
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <TIM_OC4_SetConfig+0x98>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d109      	bne.n	80040ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	019b      	lsls	r3, r3, #6
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00

08004114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 030a 	bic.w	r3, r3, #10
 8004150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0210 	bic.w	r2, r3, #16
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	031b      	lsls	r3, r3, #12
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f043 0307 	orr.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	021a      	lsls	r2, r3, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	431a      	orrs	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	609a      	str	r2, [r3, #8]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2201      	movs	r2, #1
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1a      	ldr	r2, [r3, #32]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_TIMEx_PWMN_Start+0x24>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e022      	b.n	80042f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d109      	bne.n	80042c6 <HAL_TIMEx_PWMN_Start+0x3e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e015      	b.n	80042f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d109      	bne.n	80042e0 <HAL_TIMEx_PWMN_Start+0x58>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e008      	b.n	80042f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e059      	b.n	80043ae <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <HAL_TIMEx_PWMN_Start+0x82>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	e013      	b.n	8004332 <HAL_TIMEx_PWMN_Start+0xaa>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d104      	bne.n	800431a <HAL_TIMEx_PWMN_Start+0x92>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004318:	e00b      	b.n	8004332 <HAL_TIMEx_PWMN_Start+0xaa>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d104      	bne.n	800432a <HAL_TIMEx_PWMN_Start+0xa2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	e003      	b.n	8004332 <HAL_TIMEx_PWMN_Start+0xaa>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2204      	movs	r2, #4
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f8f1 	bl	8004522 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800434e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_TIMEx_PWMN_Start+0x130>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_TIMEx_PWMN_Start+0xf0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d009      	beq.n	8004378 <HAL_TIMEx_PWMN_Start+0xf0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a14      	ldr	r2, [pc, #80]	; (80043bc <HAL_TIMEx_PWMN_Start+0x134>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIMEx_PWMN_Start+0xf0>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <HAL_TIMEx_PWMN_Start+0x138>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d111      	bne.n	800439c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b06      	cmp	r3, #6
 8004388:	d010      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	e007      	b.n	80043ac <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800

080043c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043d8:	2302      	movs	r3, #2
 80043da:	e046      	b.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a16      	ldr	r2, [pc, #88]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004428:	d009      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a10      	ldr	r2, [pc, #64]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10c      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800

08004480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004498:	2302      	movs	r3, #2
 800449a:	e03d      	b.n	8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2204      	movs	r2, #4
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	43db      	mvns	r3, r3
 8004544:	401a      	ands	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	431a      	orrs	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
	...

0800456c <siprintf>:
 800456c:	b40e      	push	{r1, r2, r3}
 800456e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004572:	b500      	push	{lr}
 8004574:	b09c      	sub	sp, #112	; 0x70
 8004576:	ab1d      	add	r3, sp, #116	; 0x74
 8004578:	9002      	str	r0, [sp, #8]
 800457a:	9006      	str	r0, [sp, #24]
 800457c:	9107      	str	r1, [sp, #28]
 800457e:	9104      	str	r1, [sp, #16]
 8004580:	4808      	ldr	r0, [pc, #32]	; (80045a4 <siprintf+0x38>)
 8004582:	4909      	ldr	r1, [pc, #36]	; (80045a8 <siprintf+0x3c>)
 8004584:	f853 2b04 	ldr.w	r2, [r3], #4
 8004588:	9105      	str	r1, [sp, #20]
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	a902      	add	r1, sp, #8
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	f000 f98e 	bl	80048b0 <_svfiprintf_r>
 8004594:	2200      	movs	r2, #0
 8004596:	9b02      	ldr	r3, [sp, #8]
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	b01c      	add	sp, #112	; 0x70
 800459c:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a0:	b003      	add	sp, #12
 80045a2:	4770      	bx	lr
 80045a4:	20000058 	.word	0x20000058
 80045a8:	ffff0208 	.word	0xffff0208

080045ac <memset>:
 80045ac:	4603      	mov	r3, r0
 80045ae:	4402      	add	r2, r0
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <memset+0xa>
 80045b4:	4770      	bx	lr
 80045b6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ba:	e7f9      	b.n	80045b0 <memset+0x4>

080045bc <__errno>:
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <__errno+0x8>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000058 	.word	0x20000058

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	2600      	movs	r6, #0
 80045cc:	4d0c      	ldr	r5, [pc, #48]	; (8004600 <__libc_init_array+0x38>)
 80045ce:	4c0d      	ldr	r4, [pc, #52]	; (8004604 <__libc_init_array+0x3c>)
 80045d0:	1b64      	subs	r4, r4, r5
 80045d2:	10a4      	asrs	r4, r4, #2
 80045d4:	42a6      	cmp	r6, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	f000 fc7a 	bl	8004ed0 <_init>
 80045dc:	2600      	movs	r6, #0
 80045de:	4d0a      	ldr	r5, [pc, #40]	; (8004608 <__libc_init_array+0x40>)
 80045e0:	4c0a      	ldr	r4, [pc, #40]	; (800460c <__libc_init_array+0x44>)
 80045e2:	1b64      	subs	r4, r4, r5
 80045e4:	10a4      	asrs	r4, r4, #2
 80045e6:	42a6      	cmp	r6, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f0:	4798      	blx	r3
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fa:	4798      	blx	r3
 80045fc:	3601      	adds	r6, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	08004f84 	.word	0x08004f84
 8004604:	08004f84 	.word	0x08004f84
 8004608:	08004f84 	.word	0x08004f84
 800460c:	08004f88 	.word	0x08004f88

08004610 <__retarget_lock_acquire_recursive>:
 8004610:	4770      	bx	lr

08004612 <__retarget_lock_release_recursive>:
 8004612:	4770      	bx	lr

08004614 <_free_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4605      	mov	r5, r0
 8004618:	2900      	cmp	r1, #0
 800461a:	d040      	beq.n	800469e <_free_r+0x8a>
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f0c      	subs	r4, r1, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfb8      	it	lt
 8004626:	18e4      	addlt	r4, r4, r3
 8004628:	f000 f8dc 	bl	80047e4 <__malloc_lock>
 800462c:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <_free_r+0x8c>)
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	b933      	cbnz	r3, 8004640 <_free_r+0x2c>
 8004632:	6063      	str	r3, [r4, #4]
 8004634:	6014      	str	r4, [r2, #0]
 8004636:	4628      	mov	r0, r5
 8004638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800463c:	f000 b8d8 	b.w	80047f0 <__malloc_unlock>
 8004640:	42a3      	cmp	r3, r4
 8004642:	d908      	bls.n	8004656 <_free_r+0x42>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	1821      	adds	r1, r4, r0
 8004648:	428b      	cmp	r3, r1
 800464a:	bf01      	itttt	eq
 800464c:	6819      	ldreq	r1, [r3, #0]
 800464e:	685b      	ldreq	r3, [r3, #4]
 8004650:	1809      	addeq	r1, r1, r0
 8004652:	6021      	streq	r1, [r4, #0]
 8004654:	e7ed      	b.n	8004632 <_free_r+0x1e>
 8004656:	461a      	mov	r2, r3
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b10b      	cbz	r3, 8004660 <_free_r+0x4c>
 800465c:	42a3      	cmp	r3, r4
 800465e:	d9fa      	bls.n	8004656 <_free_r+0x42>
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	1850      	adds	r0, r2, r1
 8004664:	42a0      	cmp	r0, r4
 8004666:	d10b      	bne.n	8004680 <_free_r+0x6c>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	4401      	add	r1, r0
 800466c:	1850      	adds	r0, r2, r1
 800466e:	4283      	cmp	r3, r0
 8004670:	6011      	str	r1, [r2, #0]
 8004672:	d1e0      	bne.n	8004636 <_free_r+0x22>
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4408      	add	r0, r1
 800467a:	6010      	str	r0, [r2, #0]
 800467c:	6053      	str	r3, [r2, #4]
 800467e:	e7da      	b.n	8004636 <_free_r+0x22>
 8004680:	d902      	bls.n	8004688 <_free_r+0x74>
 8004682:	230c      	movs	r3, #12
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	e7d6      	b.n	8004636 <_free_r+0x22>
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	1821      	adds	r1, r4, r0
 800468c:	428b      	cmp	r3, r1
 800468e:	bf01      	itttt	eq
 8004690:	6819      	ldreq	r1, [r3, #0]
 8004692:	685b      	ldreq	r3, [r3, #4]
 8004694:	1809      	addeq	r1, r1, r0
 8004696:	6021      	streq	r1, [r4, #0]
 8004698:	6063      	str	r3, [r4, #4]
 800469a:	6054      	str	r4, [r2, #4]
 800469c:	e7cb      	b.n	8004636 <_free_r+0x22>
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	200002bc 	.word	0x200002bc

080046a4 <sbrk_aligned>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4e0e      	ldr	r6, [pc, #56]	; (80046e0 <sbrk_aligned+0x3c>)
 80046a8:	460c      	mov	r4, r1
 80046aa:	6831      	ldr	r1, [r6, #0]
 80046ac:	4605      	mov	r5, r0
 80046ae:	b911      	cbnz	r1, 80046b6 <sbrk_aligned+0x12>
 80046b0:	f000 fbaa 	bl	8004e08 <_sbrk_r>
 80046b4:	6030      	str	r0, [r6, #0]
 80046b6:	4621      	mov	r1, r4
 80046b8:	4628      	mov	r0, r5
 80046ba:	f000 fba5 	bl	8004e08 <_sbrk_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	d00a      	beq.n	80046d8 <sbrk_aligned+0x34>
 80046c2:	1cc4      	adds	r4, r0, #3
 80046c4:	f024 0403 	bic.w	r4, r4, #3
 80046c8:	42a0      	cmp	r0, r4
 80046ca:	d007      	beq.n	80046dc <sbrk_aligned+0x38>
 80046cc:	1a21      	subs	r1, r4, r0
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 fb9a 	bl	8004e08 <_sbrk_r>
 80046d4:	3001      	adds	r0, #1
 80046d6:	d101      	bne.n	80046dc <sbrk_aligned+0x38>
 80046d8:	f04f 34ff 	mov.w	r4, #4294967295
 80046dc:	4620      	mov	r0, r4
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	200002c0 	.word	0x200002c0

080046e4 <_malloc_r>:
 80046e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046e8:	1ccd      	adds	r5, r1, #3
 80046ea:	f025 0503 	bic.w	r5, r5, #3
 80046ee:	3508      	adds	r5, #8
 80046f0:	2d0c      	cmp	r5, #12
 80046f2:	bf38      	it	cc
 80046f4:	250c      	movcc	r5, #12
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	4607      	mov	r7, r0
 80046fa:	db01      	blt.n	8004700 <_malloc_r+0x1c>
 80046fc:	42a9      	cmp	r1, r5
 80046fe:	d905      	bls.n	800470c <_malloc_r+0x28>
 8004700:	230c      	movs	r3, #12
 8004702:	2600      	movs	r6, #0
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4630      	mov	r0, r6
 8004708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047e0 <_malloc_r+0xfc>
 8004710:	f000 f868 	bl	80047e4 <__malloc_lock>
 8004714:	f8d8 3000 	ldr.w	r3, [r8]
 8004718:	461c      	mov	r4, r3
 800471a:	bb5c      	cbnz	r4, 8004774 <_malloc_r+0x90>
 800471c:	4629      	mov	r1, r5
 800471e:	4638      	mov	r0, r7
 8004720:	f7ff ffc0 	bl	80046a4 <sbrk_aligned>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	4604      	mov	r4, r0
 8004728:	d155      	bne.n	80047d6 <_malloc_r+0xf2>
 800472a:	f8d8 4000 	ldr.w	r4, [r8]
 800472e:	4626      	mov	r6, r4
 8004730:	2e00      	cmp	r6, #0
 8004732:	d145      	bne.n	80047c0 <_malloc_r+0xdc>
 8004734:	2c00      	cmp	r4, #0
 8004736:	d048      	beq.n	80047ca <_malloc_r+0xe6>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	4631      	mov	r1, r6
 800473c:	4638      	mov	r0, r7
 800473e:	eb04 0903 	add.w	r9, r4, r3
 8004742:	f000 fb61 	bl	8004e08 <_sbrk_r>
 8004746:	4581      	cmp	r9, r0
 8004748:	d13f      	bne.n	80047ca <_malloc_r+0xe6>
 800474a:	6821      	ldr	r1, [r4, #0]
 800474c:	4638      	mov	r0, r7
 800474e:	1a6d      	subs	r5, r5, r1
 8004750:	4629      	mov	r1, r5
 8004752:	f7ff ffa7 	bl	80046a4 <sbrk_aligned>
 8004756:	3001      	adds	r0, #1
 8004758:	d037      	beq.n	80047ca <_malloc_r+0xe6>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	442b      	add	r3, r5
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	f8d8 3000 	ldr.w	r3, [r8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d038      	beq.n	80047da <_malloc_r+0xf6>
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	42a2      	cmp	r2, r4
 800476c:	d12b      	bne.n	80047c6 <_malloc_r+0xe2>
 800476e:	2200      	movs	r2, #0
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	e00f      	b.n	8004794 <_malloc_r+0xb0>
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	1b52      	subs	r2, r2, r5
 8004778:	d41f      	bmi.n	80047ba <_malloc_r+0xd6>
 800477a:	2a0b      	cmp	r2, #11
 800477c:	d917      	bls.n	80047ae <_malloc_r+0xca>
 800477e:	1961      	adds	r1, r4, r5
 8004780:	42a3      	cmp	r3, r4
 8004782:	6025      	str	r5, [r4, #0]
 8004784:	bf18      	it	ne
 8004786:	6059      	strne	r1, [r3, #4]
 8004788:	6863      	ldr	r3, [r4, #4]
 800478a:	bf08      	it	eq
 800478c:	f8c8 1000 	streq.w	r1, [r8]
 8004790:	5162      	str	r2, [r4, r5]
 8004792:	604b      	str	r3, [r1, #4]
 8004794:	4638      	mov	r0, r7
 8004796:	f104 060b 	add.w	r6, r4, #11
 800479a:	f000 f829 	bl	80047f0 <__malloc_unlock>
 800479e:	f026 0607 	bic.w	r6, r6, #7
 80047a2:	1d23      	adds	r3, r4, #4
 80047a4:	1af2      	subs	r2, r6, r3
 80047a6:	d0ae      	beq.n	8004706 <_malloc_r+0x22>
 80047a8:	1b9b      	subs	r3, r3, r6
 80047aa:	50a3      	str	r3, [r4, r2]
 80047ac:	e7ab      	b.n	8004706 <_malloc_r+0x22>
 80047ae:	42a3      	cmp	r3, r4
 80047b0:	6862      	ldr	r2, [r4, #4]
 80047b2:	d1dd      	bne.n	8004770 <_malloc_r+0x8c>
 80047b4:	f8c8 2000 	str.w	r2, [r8]
 80047b8:	e7ec      	b.n	8004794 <_malloc_r+0xb0>
 80047ba:	4623      	mov	r3, r4
 80047bc:	6864      	ldr	r4, [r4, #4]
 80047be:	e7ac      	b.n	800471a <_malloc_r+0x36>
 80047c0:	4634      	mov	r4, r6
 80047c2:	6876      	ldr	r6, [r6, #4]
 80047c4:	e7b4      	b.n	8004730 <_malloc_r+0x4c>
 80047c6:	4613      	mov	r3, r2
 80047c8:	e7cc      	b.n	8004764 <_malloc_r+0x80>
 80047ca:	230c      	movs	r3, #12
 80047cc:	4638      	mov	r0, r7
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	f000 f80e 	bl	80047f0 <__malloc_unlock>
 80047d4:	e797      	b.n	8004706 <_malloc_r+0x22>
 80047d6:	6025      	str	r5, [r4, #0]
 80047d8:	e7dc      	b.n	8004794 <_malloc_r+0xb0>
 80047da:	605b      	str	r3, [r3, #4]
 80047dc:	deff      	udf	#255	; 0xff
 80047de:	bf00      	nop
 80047e0:	200002bc 	.word	0x200002bc

080047e4 <__malloc_lock>:
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <__malloc_lock+0x8>)
 80047e6:	f7ff bf13 	b.w	8004610 <__retarget_lock_acquire_recursive>
 80047ea:	bf00      	nop
 80047ec:	200002b8 	.word	0x200002b8

080047f0 <__malloc_unlock>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__malloc_unlock+0x8>)
 80047f2:	f7ff bf0e 	b.w	8004612 <__retarget_lock_release_recursive>
 80047f6:	bf00      	nop
 80047f8:	200002b8 	.word	0x200002b8

080047fc <__ssputs_r>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	461f      	mov	r7, r3
 8004802:	688e      	ldr	r6, [r1, #8]
 8004804:	4682      	mov	sl, r0
 8004806:	42be      	cmp	r6, r7
 8004808:	460c      	mov	r4, r1
 800480a:	4690      	mov	r8, r2
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	d82c      	bhi.n	800486a <__ssputs_r+0x6e>
 8004810:	898a      	ldrh	r2, [r1, #12]
 8004812:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004816:	d026      	beq.n	8004866 <__ssputs_r+0x6a>
 8004818:	6965      	ldr	r5, [r4, #20]
 800481a:	6909      	ldr	r1, [r1, #16]
 800481c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004820:	eba3 0901 	sub.w	r9, r3, r1
 8004824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004828:	1c7b      	adds	r3, r7, #1
 800482a:	444b      	add	r3, r9
 800482c:	106d      	asrs	r5, r5, #1
 800482e:	429d      	cmp	r5, r3
 8004830:	bf38      	it	cc
 8004832:	461d      	movcc	r5, r3
 8004834:	0553      	lsls	r3, r2, #21
 8004836:	d527      	bpl.n	8004888 <__ssputs_r+0x8c>
 8004838:	4629      	mov	r1, r5
 800483a:	f7ff ff53 	bl	80046e4 <_malloc_r>
 800483e:	4606      	mov	r6, r0
 8004840:	b360      	cbz	r0, 800489c <__ssputs_r+0xa0>
 8004842:	464a      	mov	r2, r9
 8004844:	6921      	ldr	r1, [r4, #16]
 8004846:	f000 fafd 	bl	8004e44 <memcpy>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	6126      	str	r6, [r4, #16]
 8004858:	444e      	add	r6, r9
 800485a:	6026      	str	r6, [r4, #0]
 800485c:	463e      	mov	r6, r7
 800485e:	6165      	str	r5, [r4, #20]
 8004860:	eba5 0509 	sub.w	r5, r5, r9
 8004864:	60a5      	str	r5, [r4, #8]
 8004866:	42be      	cmp	r6, r7
 8004868:	d900      	bls.n	800486c <__ssputs_r+0x70>
 800486a:	463e      	mov	r6, r7
 800486c:	4632      	mov	r2, r6
 800486e:	4641      	mov	r1, r8
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	f000 faaf 	bl	8004dd4 <memmove>
 8004876:	2000      	movs	r0, #0
 8004878:	68a3      	ldr	r3, [r4, #8]
 800487a:	1b9b      	subs	r3, r3, r6
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	4433      	add	r3, r6
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	462a      	mov	r2, r5
 800488a:	f000 fae9 	bl	8004e60 <_realloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	2800      	cmp	r0, #0
 8004892:	d1e0      	bne.n	8004856 <__ssputs_r+0x5a>
 8004894:	4650      	mov	r0, sl
 8004896:	6921      	ldr	r1, [r4, #16]
 8004898:	f7ff febc 	bl	8004614 <_free_r>
 800489c:	230c      	movs	r3, #12
 800489e:	f8ca 3000 	str.w	r3, [sl]
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	e7e9      	b.n	8004884 <__ssputs_r+0x88>

080048b0 <_svfiprintf_r>:
 80048b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	4698      	mov	r8, r3
 80048b6:	898b      	ldrh	r3, [r1, #12]
 80048b8:	4607      	mov	r7, r0
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	460d      	mov	r5, r1
 80048be:	4614      	mov	r4, r2
 80048c0:	b09d      	sub	sp, #116	; 0x74
 80048c2:	d50e      	bpl.n	80048e2 <_svfiprintf_r+0x32>
 80048c4:	690b      	ldr	r3, [r1, #16]
 80048c6:	b963      	cbnz	r3, 80048e2 <_svfiprintf_r+0x32>
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	f7ff ff0b 	bl	80046e4 <_malloc_r>
 80048ce:	6028      	str	r0, [r5, #0]
 80048d0:	6128      	str	r0, [r5, #16]
 80048d2:	b920      	cbnz	r0, 80048de <_svfiprintf_r+0x2e>
 80048d4:	230c      	movs	r3, #12
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e0d0      	b.n	8004a80 <_svfiprintf_r+0x1d0>
 80048de:	2340      	movs	r3, #64	; 0x40
 80048e0:	616b      	str	r3, [r5, #20]
 80048e2:	2300      	movs	r3, #0
 80048e4:	9309      	str	r3, [sp, #36]	; 0x24
 80048e6:	2320      	movs	r3, #32
 80048e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ec:	2330      	movs	r3, #48	; 0x30
 80048ee:	f04f 0901 	mov.w	r9, #1
 80048f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004a98 <_svfiprintf_r+0x1e8>
 80048fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048fe:	4623      	mov	r3, r4
 8004900:	469a      	mov	sl, r3
 8004902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004906:	b10a      	cbz	r2, 800490c <_svfiprintf_r+0x5c>
 8004908:	2a25      	cmp	r2, #37	; 0x25
 800490a:	d1f9      	bne.n	8004900 <_svfiprintf_r+0x50>
 800490c:	ebba 0b04 	subs.w	fp, sl, r4
 8004910:	d00b      	beq.n	800492a <_svfiprintf_r+0x7a>
 8004912:	465b      	mov	r3, fp
 8004914:	4622      	mov	r2, r4
 8004916:	4629      	mov	r1, r5
 8004918:	4638      	mov	r0, r7
 800491a:	f7ff ff6f 	bl	80047fc <__ssputs_r>
 800491e:	3001      	adds	r0, #1
 8004920:	f000 80a9 	beq.w	8004a76 <_svfiprintf_r+0x1c6>
 8004924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004926:	445a      	add	r2, fp
 8004928:	9209      	str	r2, [sp, #36]	; 0x24
 800492a:	f89a 3000 	ldrb.w	r3, [sl]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a1 	beq.w	8004a76 <_svfiprintf_r+0x1c6>
 8004934:	2300      	movs	r3, #0
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800493e:	f10a 0a01 	add.w	sl, sl, #1
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	9307      	str	r3, [sp, #28]
 8004946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494a:	931a      	str	r3, [sp, #104]	; 0x68
 800494c:	4654      	mov	r4, sl
 800494e:	2205      	movs	r2, #5
 8004950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004954:	4850      	ldr	r0, [pc, #320]	; (8004a98 <_svfiprintf_r+0x1e8>)
 8004956:	f000 fa67 	bl	8004e28 <memchr>
 800495a:	9a04      	ldr	r2, [sp, #16]
 800495c:	b9d8      	cbnz	r0, 8004996 <_svfiprintf_r+0xe6>
 800495e:	06d0      	lsls	r0, r2, #27
 8004960:	bf44      	itt	mi
 8004962:	2320      	movmi	r3, #32
 8004964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004968:	0711      	lsls	r1, r2, #28
 800496a:	bf44      	itt	mi
 800496c:	232b      	movmi	r3, #43	; 0x2b
 800496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004972:	f89a 3000 	ldrb.w	r3, [sl]
 8004976:	2b2a      	cmp	r3, #42	; 0x2a
 8004978:	d015      	beq.n	80049a6 <_svfiprintf_r+0xf6>
 800497a:	4654      	mov	r4, sl
 800497c:	2000      	movs	r0, #0
 800497e:	f04f 0c0a 	mov.w	ip, #10
 8004982:	9a07      	ldr	r2, [sp, #28]
 8004984:	4621      	mov	r1, r4
 8004986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498a:	3b30      	subs	r3, #48	; 0x30
 800498c:	2b09      	cmp	r3, #9
 800498e:	d94d      	bls.n	8004a2c <_svfiprintf_r+0x17c>
 8004990:	b1b0      	cbz	r0, 80049c0 <_svfiprintf_r+0x110>
 8004992:	9207      	str	r2, [sp, #28]
 8004994:	e014      	b.n	80049c0 <_svfiprintf_r+0x110>
 8004996:	eba0 0308 	sub.w	r3, r0, r8
 800499a:	fa09 f303 	lsl.w	r3, r9, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	46a2      	mov	sl, r4
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	e7d2      	b.n	800494c <_svfiprintf_r+0x9c>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	1d19      	adds	r1, r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	9103      	str	r1, [sp, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfbb      	ittet	lt
 80049b2:	425b      	neglt	r3, r3
 80049b4:	f042 0202 	orrlt.w	r2, r2, #2
 80049b8:	9307      	strge	r3, [sp, #28]
 80049ba:	9307      	strlt	r3, [sp, #28]
 80049bc:	bfb8      	it	lt
 80049be:	9204      	strlt	r2, [sp, #16]
 80049c0:	7823      	ldrb	r3, [r4, #0]
 80049c2:	2b2e      	cmp	r3, #46	; 0x2e
 80049c4:	d10c      	bne.n	80049e0 <_svfiprintf_r+0x130>
 80049c6:	7863      	ldrb	r3, [r4, #1]
 80049c8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ca:	d134      	bne.n	8004a36 <_svfiprintf_r+0x186>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	3402      	adds	r4, #2
 80049d0:	1d1a      	adds	r2, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	9203      	str	r2, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	f04f 33ff 	movlt.w	r3, #4294967295
 80049de:	9305      	str	r3, [sp, #20]
 80049e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004a9c <_svfiprintf_r+0x1ec>
 80049e4:	2203      	movs	r2, #3
 80049e6:	4650      	mov	r0, sl
 80049e8:	7821      	ldrb	r1, [r4, #0]
 80049ea:	f000 fa1d 	bl	8004e28 <memchr>
 80049ee:	b138      	cbz	r0, 8004a00 <_svfiprintf_r+0x150>
 80049f0:	2240      	movs	r2, #64	; 0x40
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	eba0 000a 	sub.w	r0, r0, sl
 80049f8:	4082      	lsls	r2, r0
 80049fa:	4313      	orrs	r3, r2
 80049fc:	3401      	adds	r4, #1
 80049fe:	9304      	str	r3, [sp, #16]
 8004a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a04:	2206      	movs	r2, #6
 8004a06:	4826      	ldr	r0, [pc, #152]	; (8004aa0 <_svfiprintf_r+0x1f0>)
 8004a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a0c:	f000 fa0c 	bl	8004e28 <memchr>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d038      	beq.n	8004a86 <_svfiprintf_r+0x1d6>
 8004a14:	4b23      	ldr	r3, [pc, #140]	; (8004aa4 <_svfiprintf_r+0x1f4>)
 8004a16:	bb1b      	cbnz	r3, 8004a60 <_svfiprintf_r+0x1b0>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	3307      	adds	r3, #7
 8004a1c:	f023 0307 	bic.w	r3, r3, #7
 8004a20:	3308      	adds	r3, #8
 8004a22:	9303      	str	r3, [sp, #12]
 8004a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a26:	4433      	add	r3, r6
 8004a28:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2a:	e768      	b.n	80048fe <_svfiprintf_r+0x4e>
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	2001      	movs	r0, #1
 8004a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a34:	e7a6      	b.n	8004984 <_svfiprintf_r+0xd4>
 8004a36:	2300      	movs	r3, #0
 8004a38:	f04f 0c0a 	mov.w	ip, #10
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	3401      	adds	r4, #1
 8004a40:	9305      	str	r3, [sp, #20]
 8004a42:	4620      	mov	r0, r4
 8004a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a48:	3a30      	subs	r2, #48	; 0x30
 8004a4a:	2a09      	cmp	r2, #9
 8004a4c:	d903      	bls.n	8004a56 <_svfiprintf_r+0x1a6>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0c6      	beq.n	80049e0 <_svfiprintf_r+0x130>
 8004a52:	9105      	str	r1, [sp, #20]
 8004a54:	e7c4      	b.n	80049e0 <_svfiprintf_r+0x130>
 8004a56:	4604      	mov	r4, r0
 8004a58:	2301      	movs	r3, #1
 8004a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a5e:	e7f0      	b.n	8004a42 <_svfiprintf_r+0x192>
 8004a60:	ab03      	add	r3, sp, #12
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	462a      	mov	r2, r5
 8004a66:	4638      	mov	r0, r7
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <_svfiprintf_r+0x1f8>)
 8004a6a:	a904      	add	r1, sp, #16
 8004a6c:	f3af 8000 	nop.w
 8004a70:	1c42      	adds	r2, r0, #1
 8004a72:	4606      	mov	r6, r0
 8004a74:	d1d6      	bne.n	8004a24 <_svfiprintf_r+0x174>
 8004a76:	89ab      	ldrh	r3, [r5, #12]
 8004a78:	065b      	lsls	r3, r3, #25
 8004a7a:	f53f af2d 	bmi.w	80048d8 <_svfiprintf_r+0x28>
 8004a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a80:	b01d      	add	sp, #116	; 0x74
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	ab03      	add	r3, sp, #12
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <_svfiprintf_r+0x1f8>)
 8004a90:	a904      	add	r1, sp, #16
 8004a92:	f000 f87d 	bl	8004b90 <_printf_i>
 8004a96:	e7eb      	b.n	8004a70 <_svfiprintf_r+0x1c0>
 8004a98:	08004f4e 	.word	0x08004f4e
 8004a9c:	08004f54 	.word	0x08004f54
 8004aa0:	08004f58 	.word	0x08004f58
 8004aa4:	00000000 	.word	0x00000000
 8004aa8:	080047fd 	.word	0x080047fd

08004aac <_printf_common>:
 8004aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab0:	4616      	mov	r6, r2
 8004ab2:	4699      	mov	r9, r3
 8004ab4:	688a      	ldr	r2, [r1, #8]
 8004ab6:	690b      	ldr	r3, [r1, #16]
 8004ab8:	4607      	mov	r7, r0
 8004aba:	4293      	cmp	r3, r2
 8004abc:	bfb8      	it	lt
 8004abe:	4613      	movlt	r3, r2
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004acc:	b10a      	cbz	r2, 8004ad2 <_printf_common+0x26>
 8004ace:	3301      	adds	r3, #1
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	0699      	lsls	r1, r3, #26
 8004ad6:	bf42      	ittt	mi
 8004ad8:	6833      	ldrmi	r3, [r6, #0]
 8004ada:	3302      	addmi	r3, #2
 8004adc:	6033      	strmi	r3, [r6, #0]
 8004ade:	6825      	ldr	r5, [r4, #0]
 8004ae0:	f015 0506 	ands.w	r5, r5, #6
 8004ae4:	d106      	bne.n	8004af4 <_printf_common+0x48>
 8004ae6:	f104 0a19 	add.w	sl, r4, #25
 8004aea:	68e3      	ldr	r3, [r4, #12]
 8004aec:	6832      	ldr	r2, [r6, #0]
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	42ab      	cmp	r3, r5
 8004af2:	dc2b      	bgt.n	8004b4c <_printf_common+0xa0>
 8004af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004af8:	1e13      	subs	r3, r2, #0
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	bf18      	it	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	0692      	lsls	r2, r2, #26
 8004b02:	d430      	bmi.n	8004b66 <_printf_common+0xba>
 8004b04:	4649      	mov	r1, r9
 8004b06:	4638      	mov	r0, r7
 8004b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b0c:	47c0      	blx	r8
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d023      	beq.n	8004b5a <_printf_common+0xae>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	6922      	ldr	r2, [r4, #16]
 8004b16:	f003 0306 	and.w	r3, r3, #6
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	bf14      	ite	ne
 8004b1e:	2500      	movne	r5, #0
 8004b20:	6833      	ldreq	r3, [r6, #0]
 8004b22:	f04f 0600 	mov.w	r6, #0
 8004b26:	bf08      	it	eq
 8004b28:	68e5      	ldreq	r5, [r4, #12]
 8004b2a:	f104 041a 	add.w	r4, r4, #26
 8004b2e:	bf08      	it	eq
 8004b30:	1aed      	subeq	r5, r5, r3
 8004b32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b36:	bf08      	it	eq
 8004b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bfc4      	itt	gt
 8004b40:	1a9b      	subgt	r3, r3, r2
 8004b42:	18ed      	addgt	r5, r5, r3
 8004b44:	42b5      	cmp	r5, r6
 8004b46:	d11a      	bne.n	8004b7e <_printf_common+0xd2>
 8004b48:	2000      	movs	r0, #0
 8004b4a:	e008      	b.n	8004b5e <_printf_common+0xb2>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4652      	mov	r2, sl
 8004b50:	4649      	mov	r1, r9
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c0      	blx	r8
 8004b56:	3001      	adds	r0, #1
 8004b58:	d103      	bne.n	8004b62 <_printf_common+0xb6>
 8004b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b62:	3501      	adds	r5, #1
 8004b64:	e7c1      	b.n	8004aea <_printf_common+0x3e>
 8004b66:	2030      	movs	r0, #48	; 0x30
 8004b68:	18e1      	adds	r1, r4, r3
 8004b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b74:	4422      	add	r2, r4
 8004b76:	3302      	adds	r3, #2
 8004b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b7c:	e7c2      	b.n	8004b04 <_printf_common+0x58>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4622      	mov	r2, r4
 8004b82:	4649      	mov	r1, r9
 8004b84:	4638      	mov	r0, r7
 8004b86:	47c0      	blx	r8
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d0e6      	beq.n	8004b5a <_printf_common+0xae>
 8004b8c:	3601      	adds	r6, #1
 8004b8e:	e7d9      	b.n	8004b44 <_printf_common+0x98>

08004b90 <_printf_i>:
 8004b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	7e0f      	ldrb	r7, [r1, #24]
 8004b96:	4691      	mov	r9, r2
 8004b98:	2f78      	cmp	r7, #120	; 0x78
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	469a      	mov	sl, r3
 8004ba0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ba6:	d807      	bhi.n	8004bb8 <_printf_i+0x28>
 8004ba8:	2f62      	cmp	r7, #98	; 0x62
 8004baa:	d80a      	bhi.n	8004bc2 <_printf_i+0x32>
 8004bac:	2f00      	cmp	r7, #0
 8004bae:	f000 80d5 	beq.w	8004d5c <_printf_i+0x1cc>
 8004bb2:	2f58      	cmp	r7, #88	; 0x58
 8004bb4:	f000 80c1 	beq.w	8004d3a <_printf_i+0x1aa>
 8004bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bc0:	e03a      	b.n	8004c38 <_printf_i+0xa8>
 8004bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bc6:	2b15      	cmp	r3, #21
 8004bc8:	d8f6      	bhi.n	8004bb8 <_printf_i+0x28>
 8004bca:	a101      	add	r1, pc, #4	; (adr r1, 8004bd0 <_printf_i+0x40>)
 8004bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c3d 	.word	0x08004c3d
 8004bd8:	08004bb9 	.word	0x08004bb9
 8004bdc:	08004bb9 	.word	0x08004bb9
 8004be0:	08004bb9 	.word	0x08004bb9
 8004be4:	08004bb9 	.word	0x08004bb9
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004bb9 	.word	0x08004bb9
 8004bf0:	08004bb9 	.word	0x08004bb9
 8004bf4:	08004bb9 	.word	0x08004bb9
 8004bf8:	08004bb9 	.word	0x08004bb9
 8004bfc:	08004d43 	.word	0x08004d43
 8004c00:	08004c69 	.word	0x08004c69
 8004c04:	08004cfd 	.word	0x08004cfd
 8004c08:	08004bb9 	.word	0x08004bb9
 8004c0c:	08004bb9 	.word	0x08004bb9
 8004c10:	08004d65 	.word	0x08004d65
 8004c14:	08004bb9 	.word	0x08004bb9
 8004c18:	08004c69 	.word	0x08004c69
 8004c1c:	08004bb9 	.word	0x08004bb9
 8004c20:	08004bb9 	.word	0x08004bb9
 8004c24:	08004d05 	.word	0x08004d05
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	602a      	str	r2, [r5, #0]
 8004c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0a0      	b.n	8004d7e <_printf_i+0x1ee>
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	0607      	lsls	r7, r0, #24
 8004c42:	f103 0104 	add.w	r1, r3, #4
 8004c46:	6029      	str	r1, [r5, #0]
 8004c48:	d501      	bpl.n	8004c4e <_printf_i+0xbe>
 8004c4a:	681e      	ldr	r6, [r3, #0]
 8004c4c:	e003      	b.n	8004c56 <_printf_i+0xc6>
 8004c4e:	0646      	lsls	r6, r0, #25
 8004c50:	d5fb      	bpl.n	8004c4a <_printf_i+0xba>
 8004c52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	da03      	bge.n	8004c62 <_printf_i+0xd2>
 8004c5a:	232d      	movs	r3, #45	; 0x2d
 8004c5c:	4276      	negs	r6, r6
 8004c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c62:	230a      	movs	r3, #10
 8004c64:	4859      	ldr	r0, [pc, #356]	; (8004dcc <_printf_i+0x23c>)
 8004c66:	e012      	b.n	8004c8e <_printf_i+0xfe>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	6029      	str	r1, [r5, #0]
 8004c70:	0605      	lsls	r5, r0, #24
 8004c72:	d501      	bpl.n	8004c78 <_printf_i+0xe8>
 8004c74:	681e      	ldr	r6, [r3, #0]
 8004c76:	e002      	b.n	8004c7e <_printf_i+0xee>
 8004c78:	0641      	lsls	r1, r0, #25
 8004c7a:	d5fb      	bpl.n	8004c74 <_printf_i+0xe4>
 8004c7c:	881e      	ldrh	r6, [r3, #0]
 8004c7e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c80:	bf0c      	ite	eq
 8004c82:	2308      	moveq	r3, #8
 8004c84:	230a      	movne	r3, #10
 8004c86:	4851      	ldr	r0, [pc, #324]	; (8004dcc <_printf_i+0x23c>)
 8004c88:	2100      	movs	r1, #0
 8004c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c8e:	6865      	ldr	r5, [r4, #4]
 8004c90:	2d00      	cmp	r5, #0
 8004c92:	bfa8      	it	ge
 8004c94:	6821      	ldrge	r1, [r4, #0]
 8004c96:	60a5      	str	r5, [r4, #8]
 8004c98:	bfa4      	itt	ge
 8004c9a:	f021 0104 	bicge.w	r1, r1, #4
 8004c9e:	6021      	strge	r1, [r4, #0]
 8004ca0:	b90e      	cbnz	r6, 8004ca6 <_printf_i+0x116>
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	d04b      	beq.n	8004d3e <_printf_i+0x1ae>
 8004ca6:	4615      	mov	r5, r2
 8004ca8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cac:	fb03 6711 	mls	r7, r3, r1, r6
 8004cb0:	5dc7      	ldrb	r7, [r0, r7]
 8004cb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cb6:	4637      	mov	r7, r6
 8004cb8:	42bb      	cmp	r3, r7
 8004cba:	460e      	mov	r6, r1
 8004cbc:	d9f4      	bls.n	8004ca8 <_printf_i+0x118>
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d10b      	bne.n	8004cda <_printf_i+0x14a>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	07de      	lsls	r6, r3, #31
 8004cc6:	d508      	bpl.n	8004cda <_printf_i+0x14a>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	6861      	ldr	r1, [r4, #4]
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	bfde      	ittt	le
 8004cd0:	2330      	movle	r3, #48	; 0x30
 8004cd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cda:	1b52      	subs	r2, r2, r5
 8004cdc:	6122      	str	r2, [r4, #16]
 8004cde:	464b      	mov	r3, r9
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	f8cd a000 	str.w	sl, [sp]
 8004ce8:	aa03      	add	r2, sp, #12
 8004cea:	f7ff fedf 	bl	8004aac <_printf_common>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d14a      	bne.n	8004d88 <_printf_i+0x1f8>
 8004cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf6:	b004      	add	sp, #16
 8004cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	f043 0320 	orr.w	r3, r3, #32
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	2778      	movs	r7, #120	; 0x78
 8004d06:	4832      	ldr	r0, [pc, #200]	; (8004dd0 <_printf_i+0x240>)
 8004d08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	6829      	ldr	r1, [r5, #0]
 8004d10:	061f      	lsls	r7, r3, #24
 8004d12:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d16:	d402      	bmi.n	8004d1e <_printf_i+0x18e>
 8004d18:	065f      	lsls	r7, r3, #25
 8004d1a:	bf48      	it	mi
 8004d1c:	b2b6      	uxthmi	r6, r6
 8004d1e:	07df      	lsls	r7, r3, #31
 8004d20:	bf48      	it	mi
 8004d22:	f043 0320 	orrmi.w	r3, r3, #32
 8004d26:	6029      	str	r1, [r5, #0]
 8004d28:	bf48      	it	mi
 8004d2a:	6023      	strmi	r3, [r4, #0]
 8004d2c:	b91e      	cbnz	r6, 8004d36 <_printf_i+0x1a6>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	f023 0320 	bic.w	r3, r3, #32
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	2310      	movs	r3, #16
 8004d38:	e7a6      	b.n	8004c88 <_printf_i+0xf8>
 8004d3a:	4824      	ldr	r0, [pc, #144]	; (8004dcc <_printf_i+0x23c>)
 8004d3c:	e7e4      	b.n	8004d08 <_printf_i+0x178>
 8004d3e:	4615      	mov	r5, r2
 8004d40:	e7bd      	b.n	8004cbe <_printf_i+0x12e>
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	6826      	ldr	r6, [r4, #0]
 8004d46:	1d18      	adds	r0, r3, #4
 8004d48:	6961      	ldr	r1, [r4, #20]
 8004d4a:	6028      	str	r0, [r5, #0]
 8004d4c:	0635      	lsls	r5, r6, #24
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	d501      	bpl.n	8004d56 <_printf_i+0x1c6>
 8004d52:	6019      	str	r1, [r3, #0]
 8004d54:	e002      	b.n	8004d5c <_printf_i+0x1cc>
 8004d56:	0670      	lsls	r0, r6, #25
 8004d58:	d5fb      	bpl.n	8004d52 <_printf_i+0x1c2>
 8004d5a:	8019      	strh	r1, [r3, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4615      	mov	r5, r2
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	e7bc      	b.n	8004cde <_printf_i+0x14e>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	2100      	movs	r1, #0
 8004d68:	1d1a      	adds	r2, r3, #4
 8004d6a:	602a      	str	r2, [r5, #0]
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f859 	bl	8004e28 <memchr>
 8004d76:	b108      	cbz	r0, 8004d7c <_printf_i+0x1ec>
 8004d78:	1b40      	subs	r0, r0, r5
 8004d7a:	6060      	str	r0, [r4, #4]
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	2300      	movs	r3, #0
 8004d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d86:	e7aa      	b.n	8004cde <_printf_i+0x14e>
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	47d0      	blx	sl
 8004d92:	3001      	adds	r0, #1
 8004d94:	d0ad      	beq.n	8004cf2 <_printf_i+0x162>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	079b      	lsls	r3, r3, #30
 8004d9a:	d413      	bmi.n	8004dc4 <_printf_i+0x234>
 8004d9c:	68e0      	ldr	r0, [r4, #12]
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	4298      	cmp	r0, r3
 8004da2:	bfb8      	it	lt
 8004da4:	4618      	movlt	r0, r3
 8004da6:	e7a6      	b.n	8004cf6 <_printf_i+0x166>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4632      	mov	r2, r6
 8004dac:	4649      	mov	r1, r9
 8004dae:	4640      	mov	r0, r8
 8004db0:	47d0      	blx	sl
 8004db2:	3001      	adds	r0, #1
 8004db4:	d09d      	beq.n	8004cf2 <_printf_i+0x162>
 8004db6:	3501      	adds	r5, #1
 8004db8:	68e3      	ldr	r3, [r4, #12]
 8004dba:	9903      	ldr	r1, [sp, #12]
 8004dbc:	1a5b      	subs	r3, r3, r1
 8004dbe:	42ab      	cmp	r3, r5
 8004dc0:	dcf2      	bgt.n	8004da8 <_printf_i+0x218>
 8004dc2:	e7eb      	b.n	8004d9c <_printf_i+0x20c>
 8004dc4:	2500      	movs	r5, #0
 8004dc6:	f104 0619 	add.w	r6, r4, #25
 8004dca:	e7f5      	b.n	8004db8 <_printf_i+0x228>
 8004dcc:	08004f5f 	.word	0x08004f5f
 8004dd0:	08004f70 	.word	0x08004f70

08004dd4 <memmove>:
 8004dd4:	4288      	cmp	r0, r1
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	eb01 0402 	add.w	r4, r1, r2
 8004ddc:	d902      	bls.n	8004de4 <memmove+0x10>
 8004dde:	4284      	cmp	r4, r0
 8004de0:	4623      	mov	r3, r4
 8004de2:	d807      	bhi.n	8004df4 <memmove+0x20>
 8004de4:	1e43      	subs	r3, r0, #1
 8004de6:	42a1      	cmp	r1, r4
 8004de8:	d008      	beq.n	8004dfc <memmove+0x28>
 8004dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004df2:	e7f8      	b.n	8004de6 <memmove+0x12>
 8004df4:	4601      	mov	r1, r0
 8004df6:	4402      	add	r2, r0
 8004df8:	428a      	cmp	r2, r1
 8004dfa:	d100      	bne.n	8004dfe <memmove+0x2a>
 8004dfc:	bd10      	pop	{r4, pc}
 8004dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e06:	e7f7      	b.n	8004df8 <memmove+0x24>

08004e08 <_sbrk_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4d05      	ldr	r5, [pc, #20]	; (8004e24 <_sbrk_r+0x1c>)
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	602b      	str	r3, [r5, #0]
 8004e14:	f7fc ff80 	bl	8001d18 <_sbrk>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_sbrk_r+0x1a>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_sbrk_r+0x1a>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	200002b4 	.word	0x200002b4

08004e28 <memchr>:
 8004e28:	4603      	mov	r3, r0
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	b2c9      	uxtb	r1, r1
 8004e2e:	4402      	add	r2, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	d101      	bne.n	8004e3a <memchr+0x12>
 8004e36:	2000      	movs	r0, #0
 8004e38:	e003      	b.n	8004e42 <memchr+0x1a>
 8004e3a:	7804      	ldrb	r4, [r0, #0]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	428c      	cmp	r4, r1
 8004e40:	d1f6      	bne.n	8004e30 <memchr+0x8>
 8004e42:	bd10      	pop	{r4, pc}

08004e44 <memcpy>:
 8004e44:	440a      	add	r2, r1
 8004e46:	4291      	cmp	r1, r2
 8004e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e4c:	d100      	bne.n	8004e50 <memcpy+0xc>
 8004e4e:	4770      	bx	lr
 8004e50:	b510      	push	{r4, lr}
 8004e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e56:	4291      	cmp	r1, r2
 8004e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5c:	d1f9      	bne.n	8004e52 <memcpy+0xe>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <_realloc_r>:
 8004e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e64:	4680      	mov	r8, r0
 8004e66:	4614      	mov	r4, r2
 8004e68:	460e      	mov	r6, r1
 8004e6a:	b921      	cbnz	r1, 8004e76 <_realloc_r+0x16>
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e72:	f7ff bc37 	b.w	80046e4 <_malloc_r>
 8004e76:	b92a      	cbnz	r2, 8004e84 <_realloc_r+0x24>
 8004e78:	f7ff fbcc 	bl	8004614 <_free_r>
 8004e7c:	4625      	mov	r5, r4
 8004e7e:	4628      	mov	r0, r5
 8004e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e84:	f000 f81b 	bl	8004ebe <_malloc_usable_size_r>
 8004e88:	4284      	cmp	r4, r0
 8004e8a:	4607      	mov	r7, r0
 8004e8c:	d802      	bhi.n	8004e94 <_realloc_r+0x34>
 8004e8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e92:	d812      	bhi.n	8004eba <_realloc_r+0x5a>
 8004e94:	4621      	mov	r1, r4
 8004e96:	4640      	mov	r0, r8
 8004e98:	f7ff fc24 	bl	80046e4 <_malloc_r>
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d0ed      	beq.n	8004e7e <_realloc_r+0x1e>
 8004ea2:	42bc      	cmp	r4, r7
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	bf28      	it	cs
 8004eaa:	463a      	movcs	r2, r7
 8004eac:	f7ff ffca 	bl	8004e44 <memcpy>
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	f7ff fbae 	bl	8004614 <_free_r>
 8004eb8:	e7e1      	b.n	8004e7e <_realloc_r+0x1e>
 8004eba:	4635      	mov	r5, r6
 8004ebc:	e7df      	b.n	8004e7e <_realloc_r+0x1e>

08004ebe <_malloc_usable_size_r>:
 8004ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec2:	1f18      	subs	r0, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfbc      	itt	lt
 8004ec8:	580b      	ldrlt	r3, [r1, r0]
 8004eca:	18c0      	addlt	r0, r0, r3
 8004ecc:	4770      	bx	lr
	...

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
